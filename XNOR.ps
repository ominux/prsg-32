%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
150 150 4600 6660 600 pap
%%Page: cds 1
gis
rotp
298 9 6353 4597 clwin
298 0 6353 4593 clwin
298 0 6353 4593 clwin
ssls
1000 502 0 slc
1000 502 0 sfc
1687 2696 dlt
16 -55 dlv
16 55 dlv
16 -55 dlv
16 55 dlv
dle
72 0 1779 2688 dls
72 0 1779 2665 dls
1886 2724 dlt
44 0 dlv
-24 -32 dlv
12 0 dlv
8 -4 dlv
4 -4 dlv
4 -11 dlv
0 -8 dlv
-4 -12 dlv
-8 -8 dlv
-12 -4 dlv
-12 0 dlv
-12 4 dlv
-4 4 dlv
-4 8 dlv
dle
2010 2712 dlt
-4 8 dlv
-12 4 dlv
-8 0 dlv
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -19 dlv
4 -16 dlv
8 -8 dlv
12 -4 dlv
4 0 dlv
12 4 dlv
8 8 dlv
4 12 dlv
0 4 dlv
-4 12 dlv
-8 7 dlv
-12 4 dlv
-4 0 dlv
-12 -4 dlv
-8 -7 dlv
-4 -12 dlv
dle
2061 2724 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -11 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 11 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -83 2093 2724 dls
2125 2649 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
2181 2724 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -11 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
7 12 dlv
4 20 dlv
0 11 dlv
-4 20 dlv
-7 12 dlv
-12 4 dlv
-8 0 dlv
dle
-55 -83 2212 2724 dls
0 -55 2240 2696 dls
2240 2681 dlt
12 11 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -11 dlv
0 -40 dlv
dle
0 -84 1691 2599 dls
72 0 1723 2563 dls
72 0 1723 2539 dls
1827 2579 dlt
0 4 dlv
4 8 dlv
4 4 dlv
8 4 dlv
15 0 dlv
8 -4 dlv
4 -4 dlv
4 -8 dlv
0 -8 dlv
-4 -8 dlv
-8 -12 dlv
-39 -40 dlv
55 0 dlv
dle
1962 2543 dlt
-60 0 dlv
40 56 dlv
0 -84 dlv
dle
2006 2599 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
7 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-7 12 dlv
-12 4 dlv
-8 0 dlv
dle
-55 -84 2037 2599 dls
2069 2523 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
2125 2599 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -84 2157 2599 dls
0 -56 2185 2571 dls
2185 2555 dlt
12 12 dlv
7 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
0 -56 1691 2446 dls
1691 2430 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
1735 2430 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
1815 2446 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
1815 2398 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
1858 2458 dlt
8 4 dlv
12 12 dlv
0 -84 dlv
dle
5550 1026 dlt
16 -56 dlv
16 56 dlv
16 -56 dlv
16 56 dlv
dle
71 0 5642 1018 dls
71 0 5642 994 dls
5749 1054 dlt
44 0 dlv
-24 -32 dlv
12 0 dlv
8 -4 dlv
4 -4 dlv
4 -12 dlv
0 -8 dlv
-4 -12 dlv
-8 -8 dlv
-12 -4 dlv
-12 0 dlv
-12 4 dlv
-4 4 dlv
-4 8 dlv
dle
5872 1042 dlt
-4 8 dlv
-12 4 dlv
-8 0 dlv
-12 -4 dlv
-7 -12 dlv
-4 -20 dlv
0 -20 dlv
4 -16 dlv
7 -8 dlv
12 -4 dlv
4 0 dlv
12 4 dlv
8 8 dlv
4 12 dlv
0 4 dlv
-4 12 dlv
-8 8 dlv
-12 4 dlv
-4 0 dlv
-12 -4 dlv
-7 -8 dlv
-4 -12 dlv
dle
5924 1054 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -84 5956 1054 dls
5988 978 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
6043 1054 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -84 6075 1054 dls
0 -56 6103 1026 dls
6103 1010 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
0 -84 5554 929 dls
72 0 5586 893 dls
72 0 5586 869 dls
5689 909 dlt
0 4 dlv
4 8 dlv
4 4 dlv
8 4 dlv
16 0 dlv
8 -4 dlv
4 -4 dlv
4 -8 dlv
0 -8 dlv
-4 -8 dlv
-8 -12 dlv
-40 -40 dlv
56 0 dlv
dle
5825 873 dlt
-60 0 dlv
40 56 dlv
0 -84 dlv
dle
5868 929 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -84 5900 929 dls
5932 853 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
5988 929 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
11 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-11 4 dlv
-8 0 dlv
dle
-55 -84 6019 929 dls
0 -56 6047 901 dls
6047 885 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
0 -56 5554 776 dls
5554 760 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
5598 760 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
5677 776 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
5677 728 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
5721 787 dlt
8 4 dlv
12 12 dlv
0 -83 dlv
dle
0 -56 1691 3490 dls
1691 3474 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
1735 3474 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
1815 3490 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
1815 3442 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
1858 3502 dlt
8 4 dlv
12 12 dlv
0 -84 dlv
dle
0 -84 1691 3643 dls
72 0 1723 3607 dls
72 0 1723 3583 dls
1827 3623 dlt
0 4 dlv
4 8 dlv
4 4 dlv
8 4 dlv
15 0 dlv
8 -4 dlv
4 -4 dlv
4 -8 dlv
0 -8 dlv
-4 -8 dlv
-8 -12 dlv
-39 -40 dlv
55 0 dlv
dle
1962 3587 dlt
-60 0 dlv
40 56 dlv
0 -84 dlv
dle
2006 3643 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
7 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-7 12 dlv
-12 4 dlv
-8 0 dlv
dle
-55 -84 2037 3643 dls
2069 3567 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
2125 3643 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -84 2157 3643 dls
0 -56 2185 3615 dls
2185 3599 dlt
12 12 dlv
7 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
1687 3740 dlt
16 -55 dlv
16 55 dlv
16 -55 dlv
16 55 dlv
dle
72 0 1779 3732 dls
72 0 1779 3709 dls
1878 3768 dlt
56 0 dlv
-40 -83 dlv
dle
1962 3748 dlt
0 4 dlv
4 8 dlv
4 4 dlv
8 4 dlv
16 0 dlv
8 -4 dlv
4 -4 dlv
4 -8 dlv
0 -8 dlv
-4 -8 dlv
-8 -12 dlv
-40 -39 dlv
56 0 dlv
dle
2061 3768 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -19 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 19 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -83 2093 3768 dls
2125 3693 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
2181 3768 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -19 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
7 12 dlv
4 19 dlv
0 12 dlv
-4 20 dlv
-7 12 dlv
-12 4 dlv
-8 0 dlv
dle
-55 -83 2212 3768 dls
0 -55 2240 3740 dls
2240 3724 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -39 dlv
dle
0 -56 5554 2237 dls
5554 2221 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
5598 2221 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
5677 2237 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
5677 2189 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
5721 2249 dlt
8 4 dlv
12 12 dlv
0 -84 dlv
dle
0 -83 5554 2390 dls
72 0 5586 2354 dls
72 0 5586 2331 dls
5689 2370 dlt
0 4 dlv
4 8 dlv
4 4 dlv
8 4 dlv
16 0 dlv
8 -4 dlv
4 -4 dlv
4 -8 dlv
0 -8 dlv
-4 -8 dlv
-8 -12 dlv
-40 -39 dlv
56 0 dlv
dle
5825 2335 dlt
-60 0 dlv
40 55 dlv
0 -83 dlv
dle
5868 2390 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -19 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 19 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -83 5900 2390 dls
5932 2315 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
5988 2390 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -19 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
11 4 dlv
8 12 dlv
4 19 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-11 4 dlv
-8 0 dlv
dle
-55 -83 6019 2390 dls
0 -55 6047 2362 dls
6047 2346 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -39 dlv
dle
5550 2488 dlt
16 -56 dlv
16 56 dlv
16 -56 dlv
16 56 dlv
dle
71 0 5642 2480 dls
71 0 5642 2456 dls
5741 2515 dlt
56 0 dlv
-40 -83 dlv
dle
5825 2496 dlt
0 4 dlv
4 8 dlv
4 3 dlv
7 4 dlv
16 0 dlv
8 -4 dlv
4 -3 dlv
4 -8 dlv
0 -8 dlv
-4 -8 dlv
-8 -12 dlv
-39 -40 dlv
55 0 dlv
dle
5924 2515 dlt
-12 -4 dlv
-8 -11 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 11 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -83 5956 2515 dls
5988 2440 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
6043 2515 dlt
-12 -4 dlv
-8 -11 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 11 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -83 6075 2515 dls
0 -56 6103 2488 dls
6103 2472 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
1000 0 0 slc
1000 0 0 sfc
1691 2881 dlt
0 83 dlv
32 -83 dlv
32 83 dlv
0 -83 dlv
dle
1791 2964 dlt
44 0 dlv
-24 -31 dlv
12 0 dlv
8 -4 dlv
4 -4 dlv
4 -12 dlv
0 -8 dlv
-4 -12 dlv
-8 -8 dlv
-12 -4 dlv
-12 0 dlv
-12 4 dlv
-4 4 dlv
-4 8 dlv
dle
5554 1211 dlt
0 83 dlv
32 -83 dlv
32 83 dlv
0 -83 dlv
dle
5650 1274 dlt
0 4 dlv
4 8 dlv
4 4 dlv
7 4 dlv
16 0 dlv
8 -4 dlv
4 -4 dlv
4 -8 dlv
0 -8 dlv
-4 -8 dlv
-8 -12 dlv
-39 -39 dlv
55 0 dlv
dle
1691 3925 dlt
0 83 dlv
32 -83 dlv
32 83 dlv
0 -83 dlv
dle
1795 3992 dlt
8 4 dlv
12 12 dlv
0 -83 dlv
dle
5554 2672 dlt
0 84 dlv
32 -84 dlv
32 84 dlv
0 -84 dlv
dle
5669 2756 dlt
-11 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
11 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-55 -84 5701 2756 dls
1000 0 0 slc
1000 0 0 sfc
30 0 4133 2296 dls
0 -156 4148 2296 dls
30 0 4133 2140 dls
4245 2296 dlt
-22 -7 dlv
-15 -23 dlv
-8 -37 dlv
0 -22 dlv
8 -38 dlv
15 -22 dlv
22 -7 dlv
15 0 dlv
22 7 dlv
15 22 dlv
8 38 dlv
0 22 dlv
-8 37 dlv
-15 23 dlv
-22 7 dlv
-15 0 dlv
dle
-105 -156 4305 2296 dls
1000 1000 1000 slc
1000 1000 1000 sfc
223 -334 2485 4575 dls
-223 -334 2708 4575 dls
2819 4241 dlt
0 334 dlv
223 -334 dlv
0 334 dlv
dle
3249 4575 dlt
-32 -16 dlv
-32 -32 dlv
-16 -31 dlv
-16 -48 dlv
0 -80 dlv
16 -47 dlv
16 -32 dlv
32 -32 dlv
32 -16 dlv
64 0 dlv
31 16 dlv
32 32 dlv
16 32 dlv
16 47 dlv
0 80 dlv
-16 48 dlv
-16 31 dlv
-32 32 dlv
-31 16 dlv
-64 0 dlv
dle
3519 4241 dlt
0 334 dlv
144 0 dlv
47 -16 dlv
16 -16 dlv
16 -32 dlv
0 -31 dlv
-16 -32 dlv
-16 -16 dlv
-47 -16 dlv
-144 0 dlv
dle
111 -175 3631 4416 dls
4331 4496 dlt
-16 31 dlv
-32 32 dlv
-32 16 dlv
-63 0 dlv
-32 -16 dlv
-32 -32 dlv
-16 -31 dlv
-16 -48 dlv
0 -80 dlv
16 -47 dlv
16 -32 dlv
32 -32 dlv
32 -16 dlv
63 0 dlv
32 16 dlv
32 32 dlv
16 32 dlv
0 47 dlv
-80 0 dlv
dle
0 -223 4617 4464 dls
4617 4416 dlt
-32 32 dlv
-32 16 dlv
-47 0 dlv
-32 -16 dlv
-32 -32 dlv
-16 -48 dlv
0 -32 dlv
16 -47 dlv
32 -32 dlv
32 -16 dlv
47 0 dlv
32 16 dlv
32 32 dlv
dle
4760 4575 dlt
0 -270 dlv
16 -48 dlv
32 -16 dlv
32 0 dlv
dle
112 0 4712 4464 dls
4919 4368 dlt
191 0 dlv
0 32 dlv
-16 32 dlv
-16 16 dlv
-31 16 dlv
-48 0 dlv
-32 -16 dlv
-32 -32 dlv
-16 -48 dlv
0 -32 dlv
16 -47 dlv
32 -32 dlv
32 -16 dlv
48 0 dlv
31 16 dlv
32 32 dlv
dle
2708 4002 dlt
-32 32 dlv
-47 16 dlv
-64 0 dlv
-48 -16 dlv
-32 -32 dlv
0 -31 dlv
16 -32 dlv
16 -16 dlv
32 -16 dlv
95 -32 dlv
32 -16 dlv
16 -16 dlv
16 -32 dlv
0 -47 dlv
-32 -32 dlv
-47 -16 dlv
-64 0 dlv
-48 16 dlv
-32 32 dlv
dle
2994 3891 dlt
-31 32 dlv
-32 16 dlv
-48 0 dlv
-32 -16 dlv
-32 -32 dlv
-15 -48 dlv
0 -32 dlv
15 -47 dlv
32 -32 dlv
32 -16 dlv
48 0 dlv
32 16 dlv
31 32 dlv
dle
0 -334 3106 4050 dls
3106 3875 dlt
47 48 dlv
32 16 dlv
48 0 dlv
32 -16 dlv
16 -48 dlv
0 -159 dlv
dle
3392 3843 dlt
191 0 dlv
0 32 dlv
-16 32 dlv
-16 16 dlv
-32 16 dlv
-47 0 dlv
-32 -16 dlv
-32 -32 dlv
-16 -48 dlv
0 -32 dlv
16 -47 dlv
32 -32 dlv
32 -16 dlv
47 0 dlv
32 16 dlv
32 32 dlv
dle
0 -223 3694 3939 dls
3694 3875 dlt
48 48 dlv
32 16 dlv
48 0 dlv
31 -16 dlv
16 -48 dlv
0 -159 dlv
dle
3869 3875 dlt
48 48 dlv
32 16 dlv
48 0 dlv
31 -16 dlv
16 -48 dlv
0 -159 dlv
dle
0 -223 4347 3939 dls
4347 3891 dlt
-32 32 dlv
-32 16 dlv
-48 0 dlv
-32 -16 dlv
-31 -32 dlv
-16 -48 dlv
0 -32 dlv
16 -47 dlv
31 -32 dlv
32 -16 dlv
48 0 dlv
32 16 dlv
32 32 dlv
dle
4490 4050 dlt
0 -270 dlv
16 -48 dlv
31 -16 dlv
32 0 dlv
dle
111 0 4442 3939 dls
4649 4050 dlt
16 -16 dlv
16 16 dlv
-16 16 dlv
-16 -16 dlv
dle
0 -223 4665 3939 dls
4967 3891 dlt
-32 32 dlv
-32 16 dlv
-47 0 dlv
-32 -16 dlv
-32 -32 dlv
-16 -48 dlv
0 -32 dlv
16 -47 dlv
32 -32 dlv
32 -16 dlv
47 0 dlv
32 16 dlv
32 32 dlv
dle
0 800 400 slc
0 800 400 sfc
1509 2046 dpb
1717 2046 dpv
1613 1941 dpv
dpu
0 313 1613 2046 dls
0 418 1613 4029 dls
522 0 1352 4447 dls
1613 2515 dlt
-52 32 dlv
0 -63 dlv
52 31 dlv
dle
209 0 1195 2672 dls
0 314 1404 2515 dls
1613 2985 dlt
0 -156 dlv
-157 0 dlv
0 -314 dlv
157 0 dlv
0 -156 dlv
dle
5476 845 dlt
-53 31 dlv
0 -62 dlv
53 31 dlv
dle
209 0 5058 1002 dls
0 313 5267 845 dls
5476 1315 dlt
0 -157 dlv
-157 0 dlv
0 -313 dlv
157 0 dlv
0 -156 dlv
dle
1613 4029 dlt
0 -156 dlv
-157 0 dlv
0 -314 dlv
157 0 dlv
0 -156 dlv
dle
0 314 1404 3559 dls
1352 3716 52 dcu
105 0 1195 3716 dls
1456 3873 dlt
53 -32 dlv
0 63 dlv
-53 -31 dlv
dle
5476 2776 dlt
0 -156 dlv
-157 0 dlv
0 -313 dlv
157 0 dlv
0 -157 dlv
dle
0 313 5267 2307 dls
5215 2463 52 dcu
104 0 5058 2463 dls
5319 2620 dlt
52 -31 dlv
0 62 dlv
-52 -31 dlv
dle
3910 2150 104 dcu
417 0 3701 2046 dls
417 0 3701 1419 dls
0 209 4118 1732 dls
0 209 3701 1732 dls
627 0 3596 1941 dls
4327 1732 dlt
-209 0 dlv
0 -208 dlv
dle
627 0 3596 1524 dls
0 314 3910 2254 dls
3492 1732 dlt
209 0 dlv
0 -208 dlv
dle
418 0 3074 1732 dls
0 522 3910 897 dls
418 0 4327 1732 dls
0 800 400 slc
0 800 400 sfc
4030 1231 dlt
0 -126 dlv
8 -23 dlv
15 -7 dlv
15 0 dlv
dle
52 0 4008 1179 dls
82 -104 4105 1179 dls
-82 -104 4187 1179 dls
119 0 4217 1060 dls
4470 1179 dlt
0 -119 dlv
-7 -22 dlv
-8 -8 dlv
-14 -7 dlv
-23 0 dlv
-15 7 dlv
dle
4470 1157 dlt
-15 15 dlv
-14 7 dlv
-23 0 dlv
-15 -7 dlv
-15 -15 dlv
-7 -23 dlv
0 -14 dlv
7 -23 dlv
15 -15 dlv
15 -7 dlv
23 0 dlv
14 7 dlv
15 15 dlv
dle
0 -104 4612 1179 dls
4612 1157 dlt
-15 15 dlv
-15 7 dlv
-22 0 dlv
-15 -7 dlv
-15 -15 dlv
-7 -23 dlv
0 -14 dlv
7 -23 dlv
15 -15 dlv
15 -7 dlv
22 0 dlv
15 7 dlv
15 15 dlv
dle
4679 1231 dlt
0 -126 dlv
8 -23 dlv
15 -7 dlv
14 0 dlv
dle
52 0 4657 1179 dls
4754 1134 dlt
89 0 dlv
0 15 dlv
-7 15 dlv
-8 8 dlv
-15 7 dlv
-22 0 dlv
-15 -7 dlv
-15 -15 dlv
-7 -23 dlv
0 -14 dlv
7 -23 dlv
15 -15 dlv
15 -7 dlv
22 0 dlv
15 7 dlv
15 15 dlv
dle
224 749 1000 slc
224 749 1000 sfc
417 0 2657 1732 dls
1195 271 52 dcs
417 0 778 271 dls
1613 3194 52 dcs
0 1044 1195 2672 dls
3910 3194 52 dcs
2297 0 1613 3194 dls
0 2401 1195 271 dls
3910 271 52 dcs
0 209 1613 3194 dls
0 209 1613 2985 dls
2715 0 1195 271 dls
0 1044 3074 1732 dls
1984 0 3074 2776 dls
0 313 5058 2463 dls
0 1043 3074 689 dls
1984 0 3074 689 dls
0 313 5058 689 dls
5476 1732 52 dcs
731 0 4745 1732 dls
0 418 5476 1732 dls
0 418 5476 2776 dls
1566 0 3910 3194 dls
0 626 3910 2568 dls
0 417 5476 1315 dls
0 418 5476 271 dls
1566 0 3910 271 dls
0 626 3910 271 dls
1000 0 0 slc
1000 0 0 sfc
470 219 dlt
39 104 dlv
40 -104 dlv
dle
50 0 484 254 dls
2353 1735 dlt
45 0 dlv
15 -5 dlv
5 -5 dlv
5 -10 dlv
0 -15 dlv
-5 -10 dlv
-5 -5 dlv
-15 -5 dlv
-45 0 dlv
0 105 dlv
45 0 dlv
15 -5 dlv
5 -5 dlv
5 -10 dlv
0 -10 dlv
-5 -10 dlv
-5 -5 dlv
-15 -5 dlv
dle
1769 2199 dlt
0 -56 dlv
-3 -10 dlv
-3 -4 dlv
-7 -3 dlv
-11 0 dlv
-7 3 dlv
dle
1769 2188 dlt
-6 7 dlv
-7 4 dlv
-11 0 dlv
-7 -4 dlv
-7 -7 dlv
-3 -10 dlv
0 -7 dlv
3 -10 dlv
7 -7 dlv
7 -4 dlv
11 0 dlv
7 4 dlv
6 7 dlv
dle
0 -49 1797 2199 dls
1797 2185 dlt
11 10 dlv
7 4 dlv
10 0 dlv
7 -4 dlv
4 -10 dlv
0 -35 dlv
dle
0 -73 1902 2223 dls
1902 2188 dlt
-7 7 dlv
-7 4 dlv
-11 0 dlv
-7 -4 dlv
-7 -7 dlv
-3 -10 dlv
0 -7 dlv
3 -10 dlv
7 -7 dlv
7 -4 dlv
11 0 dlv
7 4 dlv
7 7 dlv
dle
1724 4287 dlt
21 -49 dlv
21 49 dlv
dle
0 -73 1825 4311 dls
1825 4276 dlt
-7 7 dlv
-7 4 dlv
-10 0 dlv
-7 -4 dlv
-7 -7 dlv
-4 -10 dlv
0 -7 dlv
4 -11 dlv
7 -7 dlv
7 -3 dlv
10 0 dlv
7 3 dlv
7 7 dlv
dle
0 -73 1891 4311 dls
1891 4276 dlt
-7 7 dlv
-7 4 dlv
-10 0 dlv
-7 -4 dlv
-7 -7 dlv
-3 -10 dlv
0 -7 dlv
3 -11 dlv
7 -7 dlv
7 -3 dlv
10 0 dlv
7 3 dlv
7 7 dlv
dle
3838 1770 dlt
-10 10 dlv
-15 5 dlv
-20 0 dlv
-15 -5 dlv
-10 -10 dlv
0 -10 dlv
5 -10 dlv
5 -5 dlv
10 -5 dlv
30 -10 dlv
10 -5 dlv
5 -5 dlv
5 -10 dlv
0 -15 dlv
-10 -10 dlv
-15 -5 dlv
-20 0 dlv
-15 5 dlv
-10 10 dlv
dle
3982 1680 dlt
0 105 dlv
35 0 dlv
14 -5 dlv
10 -10 dlv
5 -10 dlv
5 -15 dlv
0 -25 dlv
-5 -15 dlv
-5 -10 dlv
-10 -10 dlv
-14 -5 dlv
-35 0 dlv
dle
3686 1238 dlt
-5 10 dlv
-10 10 dlv
-10 5 dlv
-20 0 dlv
-10 -5 dlv
-10 -10 dlv
-5 -10 dlv
-5 -15 dlv
0 -25 dlv
5 -15 dlv
5 -10 dlv
10 -10 dlv
10 -5 dlv
20 0 dlv
10 5 dlv
10 10 dlv
5 10 dlv
0 15 dlv
-25 0 dlv
dle
3721 1158 dlt
0 105 dlv
69 -105 dlv
0 105 dlv
dle
3686 2282 dlt
-5 10 dlv
-10 10 dlv
-10 5 dlv
-20 0 dlv
-10 -5 dlv
-10 -10 dlv
-5 -10 dlv
-5 -15 dlv
0 -25 dlv
5 -15 dlv
5 -10 dlv
10 -10 dlv
10 -5 dlv
20 0 dlv
10 5 dlv
10 10 dlv
5 10 dlv
0 15 dlv
-25 0 dlv
dle
3721 2202 dlt
0 105 dlv
44 0 dlv
15 -5 dlv
5 -5 dlv
5 -10 dlv
0 -15 dlv
-5 -10 dlv
-5 -5 dlv
-15 -5 dlv
-44 0 dlv
dle
1000 0 0 slc
1000 0 0 sfc
673 177 dpb
673 365 dpv
788 365 dpv
882 271 dpv
788 177 dpv
dps
2552 1639 dpb
2552 1826 dpv
2667 1826 dpv
2761 1732 dpv
2667 1639 dpv
dps
1571 2317 1655 2401 dbs
1571 3987 1655 4071 dbs
1571 2943 1655 3027 dbs
1571 2317 1655 2401 dbs
1154 2630 1237 2714 dbs
5434 1273 5517 1357 dbs
5434 647 5517 730 dbs
5016 960 5100 1043 dbs
1571 3361 1655 3445 dbs
1571 3987 1655 4071 dbs
1154 3674 1237 3758 dbs
5434 2108 5517 2192 dbs
5434 2735 5517 2818 dbs
5016 2422 5100 2505 dbs
3033 1691 3116 1774 dbs
3868 2526 3951 2609 dbs
3868 856 3951 939 dbs
4703 1691 4787 1774 dbs
298 0 6353 4600 clwin
gfs
%%Trailer
%%EOF
