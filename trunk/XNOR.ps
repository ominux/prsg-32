%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
150 150 4600 6350 600 pap
%%Page: cds 1
gis
rotp
0 0 4251 1349 clwin
ssls
0 0 0 slc
0 0 0 sfc
71 1298 dlt
0 -58 dlv
2 -14 dlv
4 -10 dlv
10 -2 dlv
22 0 dlv
10 2 dlv
4 10 dlv
2 14 dlv
0 58 dlv
dle
149 1228 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 8 dlv
0 14 dlv
0 8 dlv
-8 6 dlv
-36 4 dlv
-4 6 dlv
-2 8 dlv
0 10 dlv
2 8 dlv
6 6 dlv
32 0 dlv
8 -6 dlv
2 -8 dlv
dle
273 1214 dlt
-48 0 dlv
0 84 dlv
48 0 dlv
dle
-46 0 271 1258 dls
297 1214 dlt
0 84 dlv
42 0 dlv
8 -6 dlv
0 -8 dlv
0 -20 dlv
0 -8 dlv
-8 -6 dlv
-42 0 dlv
dle
339 1250 dlt
8 -4 dlv
0 -10 dlv
0 -22 dlv
dle
377 1262 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
377 1222 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
0 60 423 1214 dls
423 1256 dlt
6 12 dlv
6 6 dlv
12 0 dlv
6 -6 dlv
4 -14 dlv
dle
0 60 481 1214 dls
481 1256 dlt
4 12 dlv
6 6 dlv
14 0 dlv
6 -6 dlv
4 -12 dlv
0 -42 dlv
dle
515 1256 dlt
4 12 dlv
6 6 dlv
14 0 dlv
6 -6 dlv
4 -12 dlv
0 -42 dlv
dle
573 1246 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
0 60 639 1214 dls
639 1256 dlt
6 12 dlv
6 6 dlv
12 0 dlv
6 -6 dlv
4 -14 dlv
dle
38 0 697 1274 dls
707 1290 dlt
0 -64 dlv
4 -10 dlv
8 -2 dlv
6 0 dlv
8 2 dlv
4 10 dlv
0 10 dlv
dle
761 1246 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
0 60 827 1214 dls
827 1256 dlt
4 12 dlv
6 6 dlv
20 0 dlv
8 -6 dlv
2 -12 dlv
0 -42 dlv
dle
893 1282 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
71 1079 dlt
0 84 dlv
40 0 dlv
10 -2 dlv
6 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-12 -2 dlv
-40 0 dlv
dle
153 1079 dlt
30 84 dlv
32 -84 dlv
dle
-44 0 205 1101 dls
50 0 239 1163 dls
0 -84 265 1163 dls
361 1079 dlt
-48 0 dlv
0 84 dlv
48 0 dlv
dle
-46 0 359 1123 dls
391 1127 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
391 1087 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
437 1093 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 8 dlv
0 14 dlv
0 8 dlv
-8 6 dlv
-36 4 dlv
-4 6 dlv
-2 8 dlv
0 10 dlv
2 8 dlv
6 6 dlv
32 0 dlv
8 -6 dlv
2 -8 dlv
dle
513 1139 dlt
0 -42 dlv
4 -12 dlv
6 -6 dlv
18 0 dlv
8 6 dlv
4 10 dlv
dle
0 -60 553 1139 dls
0 60 577 1079 dls
577 1121 dlt
4 12 dlv
6 6 dlv
20 0 dlv
8 -6 dlv
2 -12 dlv
0 -42 dlv
dle
659 1079 dlt
0 84 dlv
40 0 dlv
10 -2 dlv
6 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-12 -2 dlv
-40 0 dlv
dle
741 1111 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
847 1121 dlt
-2 12 dlv
-8 6 dlv
-20 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
20 0 dlv
8 6 dlv
2 10 dlv
dle
907 1093 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 12 dlv
0 22 dlv
0 10 dlv
-8 6 dlv
-32 0 dlv
-6 -6 dlv
-4 -8 dlv
0 42 dlv
50 0 dlv
dle
999 1133 dlt
24 30 dlv
0 -84 dlv
dle
1047 1163 dlt
52 0 dlv
-38 -84 dlv
dle
1129 1127 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
1129 1087 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
1159 1147 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
1231 1163 dlt
52 0 dlv
-38 -84 dlv
dle
1313 1127 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
1313 1087 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
1393 1101 dlt
-52 0 dlv
46 62 dlv
0 -84 dlv
dle
1417 1149 dlt
2 8 dlv
6 6 dlv
34 0 dlv
8 -6 dlv
0 -8 dlv
0 -10 dlv
0 -10 dlv
-8 -4 dlv
-24 0 dlv
dle
1459 1125 dlt
8 -6 dlv
0 -12 dlv
0 -12 dlv
0 -10 dlv
-8 -6 dlv
-34 0 dlv
-6 6 dlv
-2 10 dlv
dle
1511 1147 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
1601 1079 dlt
-12 2 dlv
-4 10 dlv
-2 16 dlv
0 28 dlv
2 18 dlv
4 8 dlv
12 2 dlv
18 0 dlv
10 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-10 -2 dlv
-20 0 dlv
dle
52 84 1583 1079 dls
1659 1133 dlt
24 30 dlv
0 -84 dlv
dle
1725 1079 dlt
-12 2 dlv
-4 10 dlv
-2 16 dlv
0 28 dlv
2 18 dlv
4 8 dlv
12 2 dlv
18 0 dlv
10 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-10 -2 dlv
-20 0 dlv
dle
52 84 1707 1079 dls
71 944 dlt
0 84 dlv
42 0 dlv
8 -4 dlv
2 -10 dlv
0 -20 dlv
-2 -8 dlv
-8 -6 dlv
-42 0 dlv
dle
147 1028 dlt
0 -84 dlv
42 0 dlv
dle
231 944 dlt
-12 2 dlv
-4 10 dlv
-2 16 dlv
0 28 dlv
2 18 dlv
4 8 dlv
12 2 dlv
22 0 dlv
12 -2 dlv
6 -10 dlv
2 -16 dlv
0 -28 dlv
-2 -16 dlv
-6 -10 dlv
-12 -2 dlv
-22 0 dlv
dle
50 0 297 1028 dls
0 -84 323 1028 dls
389 958 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 8 dlv
0 14 dlv
0 8 dlv
-8 6 dlv
-36 4 dlv
-4 6 dlv
-2 8 dlv
0 10 dlv
2 8 dlv
6 6 dlv
32 0 dlv
8 -6 dlv
2 -8 dlv
dle
0 84 465 944 dls
491 1028 dlt
50 0 dlv
-52 -84 dlv
54 0 dlv
dle
615 944 dlt
-48 0 dlv
0 84 dlv
48 0 dlv
dle
-46 0 613 988 dls
645 992 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
645 952 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
691 1028 dlt
52 0 dlv
-38 -84 dlv
dle
777 944 dlt
-4 0 dlv
0 8 dlv
4 0 dlv
0 -8 dlv
dle
851 1012 dlt
0 10 dlv
-8 6 dlv
-34 0 dlv
-6 -6 dlv
-2 -10 dlv
0 -52 dlv
2 -10 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 10 dlv
0 16 dlv
0 10 dlv
-8 6 dlv
-32 0 dlv
-6 -6 dlv
-4 -12 dlv
dle
875 1028 dlt
52 0 dlv
-38 -84 dlv
dle
40 60 969 944 dls
40 -60 971 1004 dls
1053 998 dlt
24 30 dlv
0 -84 dlv
dle
1119 944 dlt
-12 2 dlv
-4 10 dlv
-2 16 dlv
0 28 dlv
2 18 dlv
4 8 dlv
12 2 dlv
18 0 dlv
10 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-10 -2 dlv
-20 0 dlv
dle
52 84 1101 944 dls
1187 944 dlt
-4 0 dlv
0 8 dlv
4 0 dlv
0 -8 dlv
dle
1211 998 dlt
24 30 dlv
0 -84 dlv
dle
1259 1028 dlt
52 0 dlv
-38 -84 dlv
dle
0 84 1353 944 dls
0 60 1377 944 dls
1377 986 dlt
4 12 dlv
6 6 dlv
20 0 dlv
8 -6 dlv
2 -12 dlv
0 -42 dlv
dle
1481 986 dlt
-2 12 dlv
-8 6 dlv
-20 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
20 0 dlv
8 6 dlv
2 10 dlv
dle
0 84 1505 944 dls
1505 986 dlt
4 12 dlv
6 6 dlv
18 0 dlv
8 -6 dlv
4 -12 dlv
0 -42 dlv
dle
1569 976 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
1635 956 dlt
4 -10 dlv
6 -2 dlv
20 0 dlv
8 2 dlv
2 6 dlv
0 14 dlv
-2 6 dlv
-8 4 dlv
-20 0 dlv
-6 2 dlv
-4 6 dlv
0 10 dlv
4 6 dlv
6 4 dlv
20 0 dlv
8 -4 dlv
2 -8 dlv
dle
71 893 dlt
0 -84 dlv
42 0 dlv
dle
0 60 137 809 dls
0 8 137 885 dls
0 84 161 809 dls
161 851 dlt
4 12 dlv
6 6 dlv
22 0 dlv
8 -6 dlv
2 -14 dlv
0 -20 dlv
-2 -14 dlv
-8 -6 dlv
-22 0 dlv
-6 6 dlv
-4 10 dlv
dle
0 60 227 809 dls
227 851 dlt
6 12 dlv
6 6 dlv
12 0 dlv
6 -6 dlv
4 -14 dlv
dle
285 857 dlt
4 8 dlv
6 4 dlv
18 0 dlv
8 -4 dlv
4 -8 dlv
0 -48 dlv
dle
325 835 dlt
-4 4 dlv
-6 4 dlv
-22 0 dlv
-4 -4 dlv
-4 -4 dlv
0 -18 dlv
4 -6 dlv
4 -2 dlv
22 0 dlv
6 2 dlv
4 6 dlv
dle
0 60 349 809 dls
349 851 dlt
6 12 dlv
6 6 dlv
12 0 dlv
6 -6 dlv
4 -14 dlv
dle
407 869 dlt
20 -60 dlv
20 60 dlv
dle
427 809 dlt
-4 -12 dlv
-6 -8 dlv
-4 0 dlv
dle
477 857 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
477 817 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
0 80 541 789 dls
541 851 dlt
4 12 dlv
6 6 dlv
22 0 dlv
6 -6 dlv
4 -14 dlv
0 -20 dlv
-2 -14 dlv
-8 -6 dlv
-22 0 dlv
-6 6 dlv
-4 12 dlv
dle
0 60 607 809 dls
607 851 dlt
6 12 dlv
6 6 dlv
12 0 dlv
6 -6 dlv
4 -14 dlv
dle
675 809 dlt
-6 6 dlv
-4 14 dlv
0 22 dlv
4 12 dlv
6 6 dlv
22 0 dlv
8 -6 dlv
2 -14 dlv
0 -20 dlv
-2 -14 dlv
-8 -6 dlv
-22 0 dlv
dle
731 789 dlt
6 2 dlv
4 8 dlv
0 70 dlv
dle
0 8 741 885 dls
765 841 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
871 851 dlt
-2 12 dlv
-8 6 dlv
-20 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
20 0 dlv
8 6 dlv
2 10 dlv
dle
38 0 895 869 dls
905 885 dlt
0 -64 dlv
4 -10 dlv
8 -2 dlv
6 0 dlv
8 2 dlv
4 10 dlv
0 10 dlv
dle
127 736 dlt
-2 12 dlv
-4 8 dlv
-10 2 dlv
-24 0 dlv
-10 -2 dlv
-4 -10 dlv
-2 -16 dlv
0 -28 dlv
2 -18 dlv
4 -8 dlv
10 -2 dlv
24 0 dlv
10 2 dlv
4 10 dlv
2 10 dlv
dle
151 706 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
0 84 217 674 dls
0 84 241 674 dls
271 722 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
271 682 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
56 84 551 674 dls
56 -84 553 758 dls
633 674 dlt
0 84 dlv
56 -84 dlv
0 84 dlv
dle
731 674 dlt
-12 2 dlv
-4 10 dlv
-2 16 dlv
0 28 dlv
2 18 dlv
4 8 dlv
12 2 dlv
22 0 dlv
12 -2 dlv
6 -10 dlv
2 -16 dlv
0 -28 dlv
-2 -16 dlv
-6 -10 dlv
-12 -2 dlv
-22 0 dlv
dle
797 674 dlt
0 84 dlv
42 0 dlv
8 -6 dlv
0 -8 dlv
0 -20 dlv
0 -8 dlv
-8 -6 dlv
-42 0 dlv
dle
839 710 dlt
8 -4 dlv
0 -10 dlv
0 -22 dlv
dle
873 742 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
71 623 dlt
28 -84 dlv
30 84 dlv
dle
0 60 153 539 dls
0 8 153 615 dls
177 571 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
243 599 dlt
16 -60 dlv
14 60 dlv
16 -60 dlv
16 60 dlv
dle
335 587 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
335 547 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
561 551 dlt
4 -10 dlv
6 -2 dlv
20 0 dlv
8 2 dlv
2 6 dlv
0 14 dlv
-2 6 dlv
-8 4 dlv
-20 0 dlv
-6 2 dlv
-4 6 dlv
0 10 dlv
4 6 dlv
6 4 dlv
20 0 dlv
8 -4 dlv
2 -8 dlv
dle
665 581 dlt
-2 12 dlv
-8 6 dlv
-20 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
20 0 dlv
8 6 dlv
2 10 dlv
dle
0 84 689 539 dls
689 581 dlt
4 12 dlv
6 6 dlv
18 0 dlv
8 -6 dlv
4 -12 dlv
0 -42 dlv
dle
753 571 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
0 60 819 539 dls
819 581 dlt
4 12 dlv
6 6 dlv
14 0 dlv
6 -6 dlv
4 -12 dlv
0 -42 dlv
dle
853 581 dlt
4 12 dlv
6 6 dlv
14 0 dlv
6 -6 dlv
4 -12 dlv
0 -42 dlv
dle
911 587 dlt
4 8 dlv
6 4 dlv
18 0 dlv
8 -4 dlv
4 -8 dlv
0 -48 dlv
dle
951 565 dlt
-4 4 dlv
-6 4 dlv
-22 0 dlv
-4 -4 dlv
-4 -4 dlv
0 -18 dlv
4 -6 dlv
4 -2 dlv
22 0 dlv
6 2 dlv
4 6 dlv
dle
38 0 975 599 dls
985 615 dlt
0 -64 dlv
4 -10 dlv
8 -2 dlv
6 0 dlv
8 2 dlv
4 10 dlv
0 10 dlv
dle
0 60 1039 539 dls
0 8 1039 615 dls
1103 581 dlt
-2 12 dlv
-8 6 dlv
-20 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
20 0 dlv
8 6 dlv
2 10 dlv
dle
71 403 dlt
0 84 dlv
42 0 dlv
8 -4 dlv
2 -10 dlv
0 -20 dlv
-2 -8 dlv
-8 -6 dlv
-42 0 dlv
dle
0 84 147 403 dls
181 403 dlt
-6 6 dlv
-4 14 dlv
0 22 dlv
4 12 dlv
6 6 dlv
22 0 dlv
8 -6 dlv
2 -14 dlv
0 -20 dlv
-2 -14 dlv
-8 -6 dlv
-22 0 dlv
dle
38 0 237 463 dls
247 479 dlt
0 -64 dlv
4 -10 dlv
8 -2 dlv
6 0 dlv
8 2 dlv
4 10 dlv
0 10 dlv
dle
319 403 dlt
30 84 dlv
32 -84 dlv
dle
-44 0 371 425 dls
0 60 405 403 dls
405 445 dlt
6 12 dlv
6 6 dlv
12 0 dlv
6 -6 dlv
4 -14 dlv
dle
463 435 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
529 451 dlt
4 8 dlv
6 4 dlv
18 0 dlv
8 -4 dlv
4 -8 dlv
0 -48 dlv
dle
569 429 dlt
-4 4 dlv
-6 4 dlv
-22 0 dlv
-4 -4 dlv
-4 -4 dlv
0 -18 dlv
4 -6 dlv
4 -2 dlv
22 0 dlv
6 2 dlv
4 6 dlv
dle
599 451 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
599 411 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
681 487 dlt
-12 -2 dlv
-4 -8 dlv
-2 -18 dlv
0 -28 dlv
2 -16 dlv
4 -10 dlv
12 -2 dlv
dle
723 487 dlt
-12 -2 dlv
-4 -8 dlv
-2 -18 dlv
0 -28 dlv
2 -16 dlv
4 -10 dlv
12 -2 dlv
dle
42 0 751 439 dls
823 471 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
905 403 dlt
-4 0 dlv
0 8 dlv
4 0 dlv
0 -8 dlv
dle
929 457 dlt
24 30 dlv
0 -84 dlv
dle
42 0 999 439 dls
1087 403 dlt
-12 2 dlv
-4 10 dlv
-2 16 dlv
0 28 dlv
2 18 dlv
4 8 dlv
12 2 dlv
18 0 dlv
10 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-10 -2 dlv
-20 0 dlv
dle
52 84 1069 403 dls
1155 403 dlt
-4 0 dlv
0 8 dlv
4 0 dlv
0 -8 dlv
dle
1179 419 dlt
2 -10 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 10 dlv
0 52 dlv
0 10 dlv
-8 6 dlv
-34 0 dlv
-6 -6 dlv
-2 -10 dlv
0 -14 dlv
2 -12 dlv
6 -6 dlv
32 0 dlv
8 6 dlv
2 12 dlv
dle
1253 457 dlt
24 30 dlv
0 -84 dlv
dle
1303 471 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
1375 417 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 12 dlv
0 22 dlv
0 10 dlv
-8 6 dlv
-32 0 dlv
-6 -6 dlv
-4 -8 dlv
0 42 dlv
50 0 dlv
dle
1449 487 dlt
12 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-12 -2 dlv
dle
1527 487 dlt
-12 -2 dlv
-4 -8 dlv
-2 -18 dlv
0 -28 dlv
2 -16 dlv
4 -10 dlv
12 -2 dlv
dle
1551 457 dlt
24 30 dlv
0 -84 dlv
dle
1609 403 dlt
-4 0 dlv
0 8 dlv
4 0 dlv
0 -8 dlv
dle
1633 417 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 12 dlv
0 22 dlv
0 10 dlv
-8 6 dlv
-32 0 dlv
-6 -6 dlv
-4 -8 dlv
0 42 dlv
50 0 dlv
dle
1709 471 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
1781 417 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 12 dlv
0 22 dlv
0 10 dlv
-8 6 dlv
-32 0 dlv
-6 -6 dlv
-4 -8 dlv
0 42 dlv
50 0 dlv
dle
1873 457 dlt
24 30 dlv
0 -84 dlv
dle
1931 403 dlt
-4 0 dlv
0 8 dlv
4 0 dlv
0 -8 dlv
dle
1995 449 dlt
10 -6 dlv
0 -8 dlv
0 -18 dlv
0 -8 dlv
-8 -6 dlv
-34 0 dlv
-6 6 dlv
-2 8 dlv
0 18 dlv
2 8 dlv
8 6 dlv
30 0 dlv
8 4 dlv
2 10 dlv
0 10 dlv
-2 8 dlv
-8 6 dlv
-30 0 dlv
-6 -6 dlv
-2 -8 dlv
0 -10 dlv
2 -8 dlv
6 -6 dlv
dle
2029 457 dlt
24 30 dlv
0 -84 dlv
dle
2079 471 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
2151 417 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 12 dlv
0 22 dlv
0 10 dlv
-8 6 dlv
-32 0 dlv
-6 -6 dlv
-4 -8 dlv
0 42 dlv
50 0 dlv
dle
2225 487 dlt
12 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-12 -2 dlv
dle
2267 487 dlt
12 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-12 -2 dlv
dle
1349 4251 0 0 dbu
%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
150 150 4600 6350 600 pap
nxp
%%Page: cds 1
rotp
115 9 6214 4593 clwin
115 10 6215 4595 clwin
115 0 6215 4600 clwin
ssls
1000 502 0 slc
1000 502 0 sfc
1515 2726 dlt
16 -56 dlv
16 56 dlv
16 -56 dlv
16 56 dlv
dle
72 0 1607 2718 dls
72 0 1607 2694 dls
1715 2755 dlt
44 0 dlv
-24 -33 dlv
12 0 dlv
8 -4 dlv
4 -4 dlv
4 -12 dlv
0 -8 dlv
-4 -12 dlv
-8 -8 dlv
-12 -4 dlv
-12 0 dlv
-12 4 dlv
-4 4 dlv
-4 8 dlv
dle
1839 2742 dlt
-4 8 dlv
-12 5 dlv
-8 0 dlv
-12 -5 dlv
-8 -12 dlv
-4 -20 dlv
0 -20 dlv
4 -16 dlv
8 -8 dlv
12 -4 dlv
4 0 dlv
12 4 dlv
8 8 dlv
4 12 dlv
0 4 dlv
-4 12 dlv
-8 8 dlv
-12 4 dlv
-4 0 dlv
-12 -4 dlv
-8 -8 dlv
-4 -12 dlv
dle
1891 2755 dlt
-12 -5 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 5 dlv
-8 0 dlv
dle
-56 -85 1923 2755 dls
1956 2678 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
2012 2755 dlt
-12 -5 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 5 dlv
-8 0 dlv
dle
-56 -85 2044 2755 dls
0 -56 2072 2726 dls
2072 2710 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
0 -84 1519 2628 dls
72 0 1551 2592 dls
72 0 1551 2568 dls
1655 2608 dlt
0 4 dlv
4 8 dlv
4 4 dlv
8 4 dlv
16 0 dlv
8 -4 dlv
4 -4 dlv
4 -8 dlv
0 -8 dlv
-4 -8 dlv
-8 -12 dlv
-40 -40 dlv
56 0 dlv
dle
1791 2572 dlt
-60 0 dlv
40 56 dlv
0 -84 dlv
dle
1835 2628 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -84 1867 2628 dls
1899 2552 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
1956 2628 dlt
-13 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
13 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-57 -84 1988 2628 dls
0 -56 2016 2600 dls
2016 2584 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
0 -56 1519 2474 dls
1519 2458 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
1563 2458 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
1643 2474 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
1643 2426 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
1687 2486 dlt
8 4 dlv
12 12 dlv
0 -84 dlv
dle
5406 1044 dlt
16 -56 dlv
16 56 dlv
16 -56 dlv
16 56 dlv
dle
72 0 5498 1036 dls
72 0 5498 1012 dls
5607 1072 dlt
44 0 dlv
-24 -32 dlv
12 0 dlv
8 -4 dlv
4 -4 dlv
4 -12 dlv
0 -8 dlv
-4 -12 dlv
-8 -8 dlv
-12 -4 dlv
-12 0 dlv
-12 4 dlv
-5 4 dlv
-4 8 dlv
dle
5731 1060 dlt
-4 8 dlv
-12 4 dlv
-8 0 dlv
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -20 dlv
4 -16 dlv
8 -8 dlv
12 -4 dlv
4 0 dlv
12 4 dlv
8 8 dlv
4 12 dlv
0 4 dlv
-4 12 dlv
-8 8 dlv
-12 4 dlv
-4 0 dlv
-12 -4 dlv
-8 -8 dlv
-4 -12 dlv
dle
5783 1072 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -84 5815 1072 dls
5847 996 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
5903 1072 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -84 5935 1072 dls
0 -56 5963 1044 dls
5963 1028 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
0 -85 5410 946 dls
72 0 5442 909 dls
72 0 5442 885 dls
5546 926 dlt
0 4 dlv
4 8 dlv
4 4 dlv
8 4 dlv
16 0 dlv
8 -4 dlv
4 -4 dlv
4 -8 dlv
0 -9 dlv
-4 -8 dlv
-8 -12 dlv
-40 -40 dlv
56 0 dlv
dle
5683 889 dlt
-60 0 dlv
40 57 dlv
0 -85 dlv
dle
5727 946 dlt
-12 -4 dlv
-8 -12 dlv
-4 -21 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 21 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -85 5759 946 dls
5791 869 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
5847 946 dlt
-12 -4 dlv
-8 -12 dlv
-4 -21 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 21 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -85 5879 946 dls
0 -56 5907 917 dls
5907 901 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
0 -56 5410 791 dls
5410 775 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
5454 775 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
5534 791 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
5534 743 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
5578 803 dlt
8 4 dlv
12 12 dlv
0 -84 dlv
dle
0 -56 1519 3526 dls
1519 3510 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
1563 3510 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
1643 3526 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
1643 3478 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
1687 3538 dlt
8 4 dlv
12 12 dlv
0 -84 dlv
dle
0 -84 1519 3680 dls
72 0 1551 3644 dls
72 0 1551 3620 dls
1655 3660 dlt
0 4 dlv
4 8 dlv
4 4 dlv
8 4 dlv
16 0 dlv
8 -4 dlv
4 -4 dlv
4 -8 dlv
0 -8 dlv
-4 -8 dlv
-8 -12 dlv
-40 -40 dlv
56 0 dlv
dle
1791 3624 dlt
-60 0 dlv
40 56 dlv
0 -84 dlv
dle
1835 3680 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -84 1867 3680 dls
1899 3604 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
1956 3680 dlt
-13 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
13 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-57 -84 1988 3680 dls
0 -56 2016 3652 dls
2016 3636 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
1515 3778 dlt
16 -56 dlv
16 56 dlv
16 -56 dlv
16 56 dlv
dle
72 0 1607 3770 dls
72 0 1607 3746 dls
1707 3806 dlt
56 0 dlv
-40 -84 dlv
dle
1791 3786 dlt
0 4 dlv
4 8 dlv
4 4 dlv
8 4 dlv
16 0 dlv
8 -4 dlv
4 -4 dlv
4 -8 dlv
0 -8 dlv
-4 -8 dlv
-8 -12 dlv
-40 -40 dlv
56 0 dlv
dle
1891 3806 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -84 1923 3806 dls
1956 3730 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
2012 3806 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -84 2044 3806 dls
0 -56 2072 3778 dls
2072 3762 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
0 -56 5410 2264 dls
5410 2248 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
5454 2248 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
5534 2264 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
5534 2216 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
5578 2276 dlt
8 4 dlv
12 12 dlv
0 -84 dlv
dle
0 -84 5410 2418 dls
72 0 5442 2382 dls
72 0 5442 2358 dls
5546 2398 dlt
0 4 dlv
4 8 dlv
4 4 dlv
8 4 dlv
16 0 dlv
8 -4 dlv
4 -4 dlv
4 -8 dlv
0 -8 dlv
-4 -8 dlv
-8 -12 dlv
-40 -40 dlv
56 0 dlv
dle
5683 2362 dlt
-60 0 dlv
40 56 dlv
0 -84 dlv
dle
5727 2418 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -84 5759 2418 dls
5791 2342 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
5847 2418 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -84 5879 2418 dls
0 -56 5907 2390 dls
5907 2374 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
5406 2516 dlt
16 -56 dlv
16 56 dlv
16 -56 dlv
16 56 dlv
dle
72 0 5498 2508 dls
72 0 5498 2484 dls
5598 2544 dlt
57 0 dlv
-40 -84 dlv
dle
5683 2524 dlt
0 4 dlv
4 8 dlv
4 4 dlv
8 4 dlv
16 0 dlv
8 -4 dlv
4 -4 dlv
4 -8 dlv
0 -8 dlv
-4 -8 dlv
-8 -12 dlv
-40 -40 dlv
56 0 dlv
dle
5783 2544 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -84 5815 2544 dls
5847 2468 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
5903 2544 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -84 5935 2544 dls
0 -56 5963 2516 dls
5963 2500 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
1000 0 0 slc
1000 0 0 sfc
1519 2912 dlt
0 84 dlv
32 -84 dlv
32 84 dlv
0 -84 dlv
dle
1619 2996 dlt
44 0 dlv
-24 -32 dlv
12 0 dlv
8 -4 dlv
4 -4 dlv
4 -12 dlv
0 -8 dlv
-4 -12 dlv
-8 -8 dlv
-12 -4 dlv
-12 0 dlv
-12 4 dlv
-4 4 dlv
-4 8 dlv
dle
5410 1230 dlt
0 84 dlv
32 -84 dlv
32 84 dlv
0 -84 dlv
dle
5506 1294 dlt
0 4 dlv
4 8 dlv
4 4 dlv
8 4 dlv
16 0 dlv
8 -4 dlv
4 -4 dlv
4 -8 dlv
0 -8 dlv
-4 -8 dlv
-8 -12 dlv
-40 -40 dlv
56 0 dlv
dle
1519 3964 dlt
0 84 dlv
32 -84 dlv
32 84 dlv
0 -84 dlv
dle
1623 4032 dlt
8 4 dlv
12 12 dlv
0 -84 dlv
dle
5410 2702 dlt
0 84 dlv
32 -84 dlv
32 84 dlv
0 -84 dlv
dle
5526 2786 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -84 5558 2786 dls
1000 0 0 slc
1000 0 0 sfc
30 0 3979 2323 dls
0 -157 3994 2323 dls
30 0 3979 2166 dls
4092 2323 dlt
-23 -7 dlv
-15 -23 dlv
-8 -37 dlv
0 -23 dlv
8 -37 dlv
15 -23 dlv
23 -7 dlv
15 0 dlv
22 7 dlv
15 23 dlv
8 37 dlv
0 23 dlv
-8 37 dlv
-15 23 dlv
-22 7 dlv
-15 0 dlv
dle
-106 -157 4152 2323 dls
0 800 400 slc
0 800 400 sfc
1335 2071 dpb
1545 2071 dpv
1440 1966 dpv
dpu
0 315 1440 2071 dls
0 421 1440 4069 dls
526 0 1177 4490 dls
1440 2544 dlt
-53 32 dlv
0 -63 dlv
53 31 dlv
dle
210 0 1019 2702 dls
0 316 1229 2544 dls
1440 3017 dlt
0 -157 dlv
-158 0 dlv
0 -316 dlv
158 0 dlv
0 -158 dlv
dle
5331 861 dlt
-53 32 dlv
0 -63 dlv
53 31 dlv
dle
211 0 4910 1019 dls
0 316 5121 861 dls
5331 1335 dlt
0 -158 dlv
-158 0 dlv
0 -316 dlv
158 0 dlv
0 -157 dlv
dle
1440 4069 dlt
0 -158 dlv
-158 0 dlv
0 -315 dlv
158 0 dlv
0 -158 dlv
dle
0 315 1229 3596 dls
1177 3754 52 dcu
105 0 1019 3754 dls
1282 3911 dlt
53 -31 dlv
0 63 dlv
-53 -32 dlv
dle
5331 2807 dlt
0 -158 dlv
-158 0 dlv
0 -315 dlv
158 0 dlv
0 -158 dlv
dle
0 315 5121 2334 dls
5068 2492 52 dcu
106 0 4910 2492 dls
5173 2649 dlt
53 -31 dlv
0 63 dlv
-53 -32 dlv
dle
3753 2176 105 dcu
421 0 3543 2071 dls
421 0 3543 1440 dls
0 211 3964 1755 dls
0 211 3543 1755 dls
631 0 3438 1966 dls
4174 1755 dlt
-210 0 dlv
0 -210 dlv
dle
631 0 3438 1545 dls
0 316 3753 2281 dls
3333 1755 dlt
210 0 dlv
0 -210 dlv
dle
421 0 2912 1755 dls
0 526 3753 914 dls
421 0 4174 1755 dls
0 800 400 slc
0 800 400 sfc
3875 1251 dlt
0 -128 dlv
8 -23 dlv
15 -7 dlv
15 0 dlv
dle
52 0 3853 1198 dls
83 -105 3950 1198 dls
-83 -105 4033 1198 dls
120 0 4063 1078 dls
4318 1198 dlt
0 -120 dlv
-7 -23 dlv
-8 -7 dlv
-15 -8 dlv
-22 0 dlv
-15 8 dlv
dle
4318 1175 dlt
-15 15 dlv
-15 8 dlv
-22 0 dlv
-15 -8 dlv
-15 -15 dlv
-8 -22 dlv
0 -15 dlv
8 -23 dlv
15 -15 dlv
15 -7 dlv
22 0 dlv
15 7 dlv
15 15 dlv
dle
0 -105 4461 1198 dls
4461 1175 dlt
-15 15 dlv
-15 8 dlv
-22 0 dlv
-15 -8 dlv
-16 -15 dlv
-7 -22 dlv
0 -15 dlv
7 -23 dlv
16 -15 dlv
15 -7 dlv
22 0 dlv
15 7 dlv
15 15 dlv
dle
4529 1251 dlt
0 -128 dlv
7 -23 dlv
15 -7 dlv
15 0 dlv
dle
53 0 4506 1198 dls
4604 1153 dlt
90 0 dlv
0 15 dlv
-8 15 dlv
-7 7 dlv
-15 8 dlv
-23 0 dlv
-15 -8 dlv
-15 -15 dlv
-7 -22 dlv
0 -15 dlv
7 -23 dlv
15 -15 dlv
15 -7 dlv
23 0 dlv
15 7 dlv
15 15 dlv
dle
224 749 1000 slc
224 749 1000 sfc
421 0 2491 1755 dls
1019 283 52 dcs
421 0 598 283 dls
1440 3228 52 dcs
0 1052 1019 2702 dls
3753 3228 52 dcs
2313 0 1440 3228 dls
0 2419 1019 283 dls
3753 283 52 53 dels
0 210 1440 3228 dls
0 211 1440 3017 dls
2734 0 1019 283 dls
0 1052 2912 1755 dls
1998 0 2912 2807 dls
0 315 4910 2492 dls
0 1051 2912 704 dls
1998 0 2912 704 dls
0 315 4910 704 dls
5331 1755 53 52 dels
736 0 4595 1755 dls
0 421 5331 1755 dls
0 421 5331 2807 dls
1578 0 3753 3228 dls
0 631 3753 2597 dls
0 420 5331 1335 dls
0 421 5331 283 dls
1578 0 3753 283 dls
0 631 3753 283 dls
1000 0 0 slc
1000 0 0 sfc
288 230 dlt
40 106 dlv
40 -106 dlv
dle
50 0 303 265 dls
2185 1758 dlt
45 0 dlv
15 -5 dlv
6 -5 dlv
5 -10 dlv
0 -15 dlv
-5 -10 dlv
-6 -5 dlv
-15 -5 dlv
-45 0 dlv
0 105 dlv
45 0 dlv
15 -5 dlv
6 -5 dlv
5 -10 dlv
0 -10 dlv
-5 -10 dlv
-6 -5 dlv
-15 -5 dlv
dle
1597 2225 dlt
0 -56 dlv
-3 -10 dlv
-4 -4 dlv
-7 -3 dlv
-10 0 dlv
-7 3 dlv
dle
1597 2215 dlt
-7 7 dlv
-7 3 dlv
-10 0 dlv
-7 -3 dlv
-7 -7 dlv
-4 -11 dlv
0 -7 dlv
4 -10 dlv
7 -7 dlv
7 -4 dlv
10 0 dlv
7 4 dlv
7 7 dlv
dle
0 -49 1625 2225 dls
1625 2211 dlt
11 11 dlv
7 3 dlv
11 0 dlv
7 -3 dlv
3 -11 dlv
0 -35 dlv
dle
0 -74 1731 2250 dls
1731 2215 dlt
-7 7 dlv
-7 3 dlv
-11 0 dlv
-7 -3 dlv
-7 -7 dlv
-3 -11 dlv
0 -7 dlv
3 -10 dlv
7 -7 dlv
7 -4 dlv
11 0 dlv
7 4 dlv
7 7 dlv
dle
1552 4329 dlt
21 -49 dlv
21 49 dlv
dle
0 -73 1654 4353 dls
1654 4318 dlt
-7 7 dlv
-7 4 dlv
-11 0 dlv
-7 -4 dlv
-7 -7 dlv
-4 -10 dlv
0 -7 dlv
4 -11 dlv
7 -7 dlv
7 -3 dlv
11 0 dlv
7 3 dlv
7 7 dlv
dle
0 -73 1720 4353 dls
1720 4318 dlt
-7 7 dlv
-7 4 dlv
-10 0 dlv
-7 -4 dlv
-7 -7 dlv
-4 -10 dlv
0 -7 dlv
4 -11 dlv
7 -7 dlv
7 -3 dlv
10 0 dlv
7 3 dlv
7 7 dlv
dle
3681 1793 dlt
-10 10 dlv
-15 5 dlv
-20 0 dlv
-15 -5 dlv
-10 -10 dlv
0 -10 dlv
5 -10 dlv
5 -5 dlv
10 -5 dlv
30 -10 dlv
10 -5 dlv
5 -5 dlv
5 -10 dlv
0 -15 dlv
-10 -10 dlv
-15 -5 dlv
-20 0 dlv
-15 5 dlv
-10 10 dlv
dle
3826 1703 dlt
0 105 dlv
35 0 dlv
15 -5 dlv
10 -10 dlv
5 -10 dlv
5 -15 dlv
0 -25 dlv
-5 -15 dlv
-5 -10 dlv
-10 -10 dlv
-15 -5 dlv
-35 0 dlv
dle
3528 1257 dlt
-5 10 dlv
-10 10 dlv
-10 5 dlv
-20 0 dlv
-10 -5 dlv
-10 -10 dlv
-5 -10 dlv
-5 -15 dlv
0 -25 dlv
5 -15 dlv
5 -10 dlv
10 -10 dlv
10 -5 dlv
20 0 dlv
10 5 dlv
10 10 dlv
5 10 dlv
0 15 dlv
-25 0 dlv
dle
3563 1177 dlt
0 105 dlv
70 -105 dlv
0 105 dlv
dle
3528 2309 dlt
-5 10 dlv
-10 10 dlv
-10 5 dlv
-20 0 dlv
-10 -5 dlv
-10 -10 dlv
-5 -10 dlv
-5 -15 dlv
0 -25 dlv
5 -15 dlv
5 -10 dlv
10 -10 dlv
10 -5 dlv
20 0 dlv
10 5 dlv
10 10 dlv
5 10 dlv
0 15 dlv
-25 0 dlv
dle
3563 2229 dlt
0 105 dlv
45 0 dlv
15 -5 dlv
5 -5 dlv
5 -10 dlv
0 -15 dlv
-5 -10 dlv
-5 -5 dlv
-15 -5 dlv
-45 0 dlv
dle
1000 0 0 slc
1000 0 0 sfc
493 188 dpb
493 378 dpv
609 378 dpv
703 283 dpv
609 188 dpv
dps
2386 1661 dpb
2386 1850 dpv
2502 1850 dpv
2597 1755 dpv
2502 1661 dpv
dps
1398 2344 1482 2428 dbs
1398 4027 1482 4111 dbs
1398 2975 1482 3060 dbs
1398 2344 1482 2428 dbs
977 2660 1061 2744 dbs
5289 1293 5373 1377 dbs
5289 662 5373 746 dbs
4868 977 4952 1061 dbs
1398 3396 1482 3480 dbs
1398 4027 1482 4111 dbs
977 3712 1061 3796 dbs
5289 2134 5373 2218 dbs
5289 2765 5373 2849 dbs
4868 2450 4952 2534 dbs
2870 1713 2954 1797 dbs
3711 2555 3796 2639 dbs
3711 872 3796 956 dbs
4553 1713 4637 1797 dbs
gfs
%%Trailer
%%EOF
