%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
150 150 4600 6660 600 pap
%%Page: cds 1
gis
9 966 4593 5685 clwin
0 966 4591 5684 clwin
0 966 4591 5684 clwin
ssls
1000 502 0 slc
1000 502 0 sfc
0 -57 2689 4037 dls
2689 4021 dlt
13 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -41 dlv
dle
2734 4021 dlt
12 12 dlv
8 4 dlv
13 0 dlv
8 -4 dlv
4 -12 dlv
0 -41 dlv
dle
2815 4037 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
2815 3988 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
2860 4049 dlt
8 4 dlv
12 12 dlv
0 -85 dlv
dle
0 -85 2689 4193 dls
73 0 2722 4157 dls
73 0 2722 4132 dls
2827 4173 dlt
0 4 dlv
5 8 dlv
4 4 dlv
8 4 dlv
16 0 dlv
8 -4 dlv
4 -4 dlv
4 -8 dlv
0 -8 dlv
-4 -8 dlv
-8 -12 dlv
-41 -41 dlv
57 0 dlv
dle
2965 4136 dlt
-60 0 dlv
40 57 dlv
0 -85 dlv
dle
3010 4193 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -13 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
5 20 dlv
0 13 dlv
-5 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-57 -85 3043 4193 dls
3075 4116 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
3132 4193 dlt
-12 -4 dlv
-8 -12 dlv
-5 -20 dlv
0 -13 dlv
5 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 13 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-57 -85 3164 4193 dls
0 -57 3193 4165 dls
3193 4149 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -41 dlv
dle
2685 4293 dlt
17 -57 dlv
16 57 dlv
16 -57 dlv
16 57 dlv
dle
73 0 2779 4284 dls
73 0 2779 4260 dls
2888 4321 dlt
45 0 dlv
-24 -32 dlv
12 0 dlv
8 -5 dlv
4 -4 dlv
4 -12 dlv
0 -8 dlv
-4 -12 dlv
-8 -8 dlv
-12 -4 dlv
-13 0 dlv
-12 4 dlv
-4 4 dlv
-4 8 dlv
dle
3014 4309 dlt
-4 8 dlv
-12 4 dlv
-8 0 dlv
-12 -4 dlv
-9 -12 dlv
-4 -21 dlv
0 -20 dlv
4 -16 dlv
9 -8 dlv
12 -4 dlv
4 0 dlv
12 4 dlv
8 8 dlv
4 12 dlv
0 4 dlv
-4 12 dlv
-8 8 dlv
-12 5 dlv
-4 0 dlv
-12 -5 dlv
-9 -8 dlv
-4 -12 dlv
dle
3067 4321 dlt
-12 -4 dlv
-8 -12 dlv
-4 -21 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 21 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -85 3099 4321 dls
3132 4244 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
3189 4321 dlt
-13 -4 dlv
-8 -12 dlv
-4 -21 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
13 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 21 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-57 -85 3221 4321 dls
0 -57 3249 4293 dls
3249 4276 dlt
13 13 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -13 dlv
0 -40 dlv
dle
2685 3227 dlt
17 -56 dlv
16 56 dlv
16 -56 dlv
16 56 dlv
dle
73 0 2779 3219 dls
73 0 2779 3195 dls
2888 3256 dlt
45 0 dlv
-24 -33 dlv
12 0 dlv
8 -4 dlv
4 -4 dlv
4 -12 dlv
0 -8 dlv
-4 -12 dlv
-8 -8 dlv
-12 -4 dlv
-13 0 dlv
-12 4 dlv
-4 4 dlv
-4 8 dlv
dle
3014 3244 dlt
-4 8 dlv
-12 4 dlv
-8 0 dlv
-12 -4 dlv
-9 -12 dlv
-4 -21 dlv
0 -20 dlv
4 -16 dlv
9 -8 dlv
12 -4 dlv
4 0 dlv
12 4 dlv
8 8 dlv
4 12 dlv
0 4 dlv
-4 12 dlv
-8 8 dlv
-12 4 dlv
-4 0 dlv
-12 -4 dlv
-9 -8 dlv
-4 -12 dlv
dle
3067 3256 dlt
-12 -4 dlv
-8 -12 dlv
-4 -21 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 21 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -85 3099 3256 dls
3132 3179 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
3189 3256 dlt
-13 -4 dlv
-8 -12 dlv
-4 -21 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
13 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 21 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-57 -85 3221 3256 dls
0 -56 3249 3227 dls
3249 3211 dlt
13 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
0 -85 2689 3128 dls
73 0 2722 3091 dls
73 0 2722 3067 dls
2827 3108 dlt
0 4 dlv
5 8 dlv
4 4 dlv
8 4 dlv
16 0 dlv
8 -4 dlv
4 -4 dlv
4 -8 dlv
0 -8 dlv
-4 -9 dlv
-8 -12 dlv
-41 -40 dlv
57 0 dlv
dle
2965 3071 dlt
-60 0 dlv
40 57 dlv
0 -85 dlv
dle
3010 3128 dlt
-12 -4 dlv
-8 -12 dlv
-4 -21 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
5 20 dlv
0 12 dlv
-5 21 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-57 -85 3043 3128 dls
3075 3051 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
3132 3128 dlt
-12 -4 dlv
-8 -12 dlv
-5 -21 dlv
0 -12 dlv
5 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 21 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-57 -85 3164 3128 dls
0 -57 3193 3100 dls
3193 3083 dlt
12 12 dlv
8 5 dlv
12 0 dlv
8 -5 dlv
4 -12 dlv
0 -40 dlv
dle
0 -57 2689 2972 dls
2689 2955 dlt
13 13 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -13 dlv
0 -40 dlv
dle
2734 2955 dlt
12 13 dlv
8 4 dlv
13 0 dlv
8 -4 dlv
4 -13 dlv
0 -40 dlv
dle
2815 2972 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
2815 2923 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
2860 2984 dlt
8 4 dlv
12 12 dlv
0 -85 dlv
dle
2685 2588 dlt
17 -57 dlv
16 57 dlv
16 -57 dlv
16 57 dlv
dle
73 0 2779 2580 dls
73 0 2779 2556 dls
2888 2617 dlt
45 0 dlv
-24 -33 dlv
12 0 dlv
8 -4 dlv
4 -4 dlv
4 -12 dlv
0 -8 dlv
-4 -12 dlv
-8 -9 dlv
-12 -4 dlv
-13 0 dlv
-12 4 dlv
-4 5 dlv
-4 8 dlv
dle
3014 2604 dlt
-4 9 dlv
-12 4 dlv
-8 0 dlv
-12 -4 dlv
-9 -13 dlv
-4 -20 dlv
0 -20 dlv
4 -16 dlv
9 -9 dlv
12 -4 dlv
4 0 dlv
12 4 dlv
8 9 dlv
4 12 dlv
0 4 dlv
-4 12 dlv
-8 8 dlv
-12 4 dlv
-4 0 dlv
-12 -4 dlv
-9 -8 dlv
-4 -12 dlv
dle
3067 2617 dlt
-12 -4 dlv
-8 -13 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -13 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 13 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 13 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -86 3099 2617 dls
3132 2540 dlt
-4 -5 dlv
4 -4 dlv
4 4 dlv
-4 5 dlv
dle
3189 2617 dlt
-13 -4 dlv
-8 -13 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -13 dlv
13 -4 dlv
8 0 dlv
12 4 dlv
8 13 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 13 dlv
-12 4 dlv
-8 0 dlv
dle
-57 -86 3221 2617 dls
0 -57 3249 2588 dls
3249 2572 dlt
13 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -41 dlv
dle
0 -85 2689 2489 dls
73 0 2722 2452 dls
73 0 2722 2428 dls
2827 2468 dlt
0 5 dlv
5 8 dlv
4 4 dlv
8 4 dlv
16 0 dlv
8 -4 dlv
4 -4 dlv
4 -8 dlv
0 -9 dlv
-4 -8 dlv
-8 -12 dlv
-41 -40 dlv
57 0 dlv
dle
2965 2432 dlt
-60 0 dlv
40 57 dlv
0 -85 dlv
dle
3010 2489 dlt
-12 -4 dlv
-8 -12 dlv
-4 -21 dlv
0 -12 dlv
4 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
5 20 dlv
0 12 dlv
-5 21 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-57 -85 3043 2489 dls
3075 2412 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
3132 2489 dlt
-12 -4 dlv
-8 -12 dlv
-5 -21 dlv
0 -12 dlv
5 -20 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 20 dlv
0 12 dlv
-4 21 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-57 -85 3164 2489 dls
0 -56 3193 2460 dls
3193 2444 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
0 -57 2689 2333 dls
2689 2316 dlt
13 12 dlv
8 5 dlv
12 0 dlv
8 -5 dlv
4 -12 dlv
0 -40 dlv
dle
2734 2316 dlt
12 12 dlv
8 5 dlv
13 0 dlv
8 -5 dlv
4 -12 dlv
0 -40 dlv
dle
2815 2333 dlt
-4 -5 dlv
4 -4 dlv
4 4 dlv
-4 5 dlv
dle
2815 2284 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
2860 2345 dlt
8 4 dlv
12 12 dlv
0 -85 dlv
dle
2685 1949 dlt
17 -57 dlv
16 57 dlv
16 -57 dlv
16 57 dlv
dle
73 0 2779 1941 dls
73 0 2779 1917 dls
2888 1977 dlt
45 0 dlv
-24 -32 dlv
12 0 dlv
8 -4 dlv
4 -4 dlv
4 -12 dlv
0 -8 dlv
-4 -13 dlv
-8 -8 dlv
-12 -4 dlv
-13 0 dlv
-12 4 dlv
-4 4 dlv
-4 8 dlv
dle
3014 1965 dlt
-4 8 dlv
-12 4 dlv
-8 0 dlv
-12 -4 dlv
-9 -12 dlv
-4 -20 dlv
0 -20 dlv
4 -17 dlv
9 -8 dlv
12 -4 dlv
4 0 dlv
12 4 dlv
8 8 dlv
4 13 dlv
0 4 dlv
-4 12 dlv
-8 8 dlv
-12 4 dlv
-4 0 dlv
-12 -4 dlv
-9 -8 dlv
-4 -12 dlv
dle
3067 1977 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -21 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 21 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-56 -85 3099 1977 dls
3132 1900 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
3189 1977 dlt
-13 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -21 dlv
8 -12 dlv
13 -4 dlv
8 0 dlv
12 4 dlv
8 12 dlv
4 21 dlv
0 12 dlv
-4 20 dlv
-8 12 dlv
-12 4 dlv
-8 0 dlv
dle
-57 -85 3221 1977 dls
0 -57 3249 1949 dls
3249 1933 dlt
13 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -41 dlv
dle
0 -86 2689 1850 dls
73 0 2722 1813 dls
73 0 2722 1789 dls
2827 1829 dlt
0 4 dlv
5 9 dlv
4 4 dlv
8 4 dlv
16 0 dlv
8 -4 dlv
4 -4 dlv
4 -9 dlv
0 -8 dlv
-4 -8 dlv
-8 -12 dlv
-41 -41 dlv
57 0 dlv
dle
2965 1793 dlt
-60 0 dlv
40 57 dlv
0 -86 dlv
dle
3010 1850 dlt
-12 -4 dlv
-8 -13 dlv
-4 -20 dlv
0 -12 dlv
4 -20 dlv
8 -13 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 13 dlv
5 20 dlv
0 12 dlv
-5 20 dlv
-8 13 dlv
-12 4 dlv
-8 0 dlv
dle
-57 -86 3043 1850 dls
3075 1773 dlt
-4 -5 dlv
4 -4 dlv
4 4 dlv
-4 5 dlv
dle
3132 1850 dlt
-12 -4 dlv
-8 -13 dlv
-5 -20 dlv
0 -12 dlv
5 -20 dlv
8 -13 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
8 13 dlv
4 20 dlv
0 12 dlv
-4 20 dlv
-8 13 dlv
-12 4 dlv
-8 0 dlv
dle
-57 -86 3164 1850 dls
0 -57 3193 1821 dls
3193 1805 dlt
12 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -41 dlv
dle
0 -56 2689 1693 dls
2689 1677 dlt
13 12 dlv
8 4 dlv
12 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
2734 1677 dlt
12 12 dlv
8 4 dlv
13 0 dlv
8 -4 dlv
4 -12 dlv
0 -40 dlv
dle
2815 1693 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
2815 1645 dlt
-4 -4 dlv
4 -4 dlv
4 4 dlv
-4 4 dlv
dle
2860 1706 dlt
8 4 dlv
12 12 dlv
0 -85 dlv
dle
1000 0 0 slc
1000 0 0 sfc
2689 4481 dlt
0 85 dlv
33 -85 dlv
32 85 dlv
0 -85 dlv
dle
2791 4566 dlt
45 0 dlv
-25 -32 dlv
12 0 dlv
9 -5 dlv
4 -4 dlv
4 -12 dlv
0 -8 dlv
-4 -12 dlv
-9 -8 dlv
-12 -4 dlv
-12 0 dlv
-12 4 dlv
-4 4 dlv
-4 8 dlv
dle
2689 3416 dlt
0 85 dlv
33 -85 dlv
32 85 dlv
0 -85 dlv
dle
2787 3480 dlt
0 5 dlv
4 8 dlv
4 4 dlv
8 4 dlv
16 0 dlv
8 -4 dlv
5 -4 dlv
4 -8 dlv
0 -9 dlv
-4 -8 dlv
-9 -12 dlv
-40 -40 dlv
57 0 dlv
dle
2689 2776 dlt
0 86 dlv
33 -86 dlv
32 86 dlv
0 -86 dlv
dle
2795 2845 dlt
8 4 dlv
12 13 dlv
0 -86 dlv
dle
2689 2137 dlt
0 85 dlv
33 -85 dlv
32 85 dlv
0 -85 dlv
dle
2807 2222 dlt
-12 -4 dlv
-8 -12 dlv
-4 -20 dlv
0 -12 dlv
4 -21 dlv
8 -12 dlv
12 -4 dlv
8 0 dlv
12 4 dlv
9 12 dlv
4 21 dlv
0 12 dlv
-4 20 dlv
-9 12 dlv
-12 4 dlv
-8 0 dlv
dle
-57 -85 2840 2222 dls
1000 1000 1000 slc
1000 1000 1000 sfc
64 5333 dlt
0 341 dlv
228 -341 dlv
0 341 dlv
dle
373 5333 dlt
130 341 dlv
130 -341 dlv
dle
162 0 422 5447 dls
730 5333 dlt
0 341 dlv
227 -341 dlv
0 341 dlv
dle
1087 5333 dlt
0 341 dlv
114 0 dlv
48 -16 dlv
33 -33 dlv
16 -32 dlv
16 -49 dlv
0 -81 dlv
-16 -49 dlv
-16 -32 dlv
-33 -33 dlv
-48 -16 dlv
-114 0 dlv
dle
1444 5674 dlt
179 0 dlv
-98 -130 dlv
49 0 dlv
32 -16 dlv
17 -16 dlv
16 -49 dlv
0 -33 dlv
-16 -48 dlv
-33 -33 dlv
-48 -16 dlv
-49 0 dlv
-49 16 dlv
-16 16 dlv
-16 33 dlv
dle
2223 5625 dlt
-32 33 dlv
-49 16 dlv
-65 0 dlv
-48 -16 dlv
-33 -33 dlv
0 -32 dlv
16 -33 dlv
17 -16 dlv
32 -16 dlv
97 -33 dlv
33 -16 dlv
16 -16 dlv
16 -33 dlv
0 -48 dlv
-32 -33 dlv
-49 -16 dlv
-65 0 dlv
-48 16 dlv
-33 33 dlv
dle
2515 5512 dlt
-32 32 dlv
-32 16 dlv
-49 0 dlv
-33 -16 dlv
-32 -32 dlv
-16 -49 dlv
0 -33 dlv
16 -48 dlv
32 -33 dlv
33 -16 dlv
49 0 dlv
32 16 dlv
32 33 dlv
dle
0 -341 2629 5674 dls
2629 5495 dlt
49 49 dlv
32 16 dlv
49 0 dlv
32 -16 dlv
17 -49 dlv
0 -162 dlv
dle
2921 5463 dlt
195 0 dlv
0 32 dlv
-16 33 dlv
-16 16 dlv
-33 16 dlv
-49 0 dlv
-32 -16 dlv
-32 -32 dlv
-17 -49 dlv
0 -33 dlv
17 -48 dlv
32 -33 dlv
32 -16 dlv
49 0 dlv
33 16 dlv
32 33 dlv
dle
0 -227 3230 5560 dls
3230 5495 dlt
48 49 dlv
33 16 dlv
49 0 dlv
32 -16 dlv
16 -49 dlv
0 -162 dlv
dle
3408 5495 dlt
49 49 dlv
32 16 dlv
49 0 dlv
33 -16 dlv
16 -49 dlv
0 -162 dlv
dle
0 -227 3895 5560 dls
3895 5512 dlt
-32 32 dlv
-33 16 dlv
-48 0 dlv
-33 -16 dlv
-32 -32 dlv
-17 -49 dlv
0 -33 dlv
17 -48 dlv
32 -33 dlv
33 -16 dlv
48 0 dlv
33 16 dlv
32 33 dlv
dle
4041 5674 dlt
0 -276 dlv
17 -49 dlv
32 -16 dlv
32 0 dlv
dle
113 0 3993 5560 dls
4204 5674 dlt
16 -16 dlv
16 16 dlv
-11 11 dlv
dle
4215 5685 dlt
-11 -11 dlv
dle
0 -227 4220 5560 dls
4528 5512 dlt
-32 32 dlv
-33 16 dlv
-48 0 dlv
-33 -16 dlv
-32 -32 dlv
-17 -49 dlv
0 -33 dlv
17 -48 dlv
32 -33 dlv
33 -16 dlv
48 0 dlv
33 16 dlv
32 33 dlv
dle
0 800 400 slc
0 800 400 sfc
2503 1072 dpb
2716 1072 dpv
2609 966 dpv
dpu
0 320 2609 1072 dls
0 426 2609 4800 dls
533 0 2343 5226 dls
2609 4587 dlt
0 -159 dlv
-159 0 dlv
0 -320 dlv
159 0 dlv
0 -160 dlv
dle
0 320 2396 4108 dls
2343 4268 53 dcu
107 0 2183 4268 dls
2450 4428 dlt
53 -32 dlv
0 63 dlv
-53 -31 dlv
dle
2609 3043 dlt
-53 32 dlv
0 -64 dlv
53 32 dlv
dle
213 0 2183 3202 dls
0 319 2396 3043 dls
2609 3522 dlt
0 -160 dlv
-159 0 dlv
0 -319 dlv
159 0 dlv
0 -160 dlv
dle
2609 2404 dlt
-53 32 dlv
0 -64 dlv
53 32 dlv
dle
213 0 2183 2563 dls
0 319 2396 2404 dls
2609 2883 dlt
0 -160 dlv
-159 0 dlv
0 -319 dlv
159 0 dlv
0 -160 dlv
dle
2609 1764 dlt
-53 32 dlv
0 -64 dlv
53 32 dlv
dle
213 0 2183 1924 dls
0 320 2396 1764 dls
2609 2244 dlt
0 -160 dlv
-159 0 dlv
0 -320 dlv
159 0 dlv
0 -159 dlv
dle
224 749 1000 slc
224 749 1000 sfc
1970 4268 53 dcs
532 0 1438 4268 dls
745 0 1438 3202 dls
745 0 1438 1924 dls
2609 3735 53 dcs
853 0 2609 3735 dls
0 213 2609 3735 dls
213 0 1970 4268 dls
0 1705 1970 2563 dls
213 0 1970 2563 dls
0 213 2609 1392 dls
0 213 2609 4587 dls
0 213 2609 3522 dls
1000 0 0 slc
1000 0 0 sfc
1128 3230 dlt
0 5 dlv
5 11 dlv
5 5 dlv
10 5 dlv
20 0 dlv
10 -5 dlv
5 -5 dlv
6 -11 dlv
0 -10 dlv
-6 -10 dlv
-10 -15 dlv
-50 -51 dlv
71 0 dlv
dle
1159 1957 dlt
10 5 dlv
15 15 dlv
0 -106 dlv
dle
1092 4296 dlt
-5 10 dlv
-10 10 dlv
-10 5 dlv
-21 0 dlv
-10 -5 dlv
-10 -10 dlv
-5 -10 dlv
-5 -16 dlv
0 -25 dlv
5 -15 dlv
5 -10 dlv
10 -10 dlv
10 -6 dlv
21 0 dlv
10 6 dlv
10 10 dlv
5 10 dlv
dle
0 -107 1128 4321 dls
-71 -71 1199 4321 dls
46 -61 1153 4275 dls
2975 3788 dlt
-11 -5 dlv
-10 -10 dlv
-5 -10 dlv
-5 -15 dlv
0 -26 dlv
5 -15 dlv
5 -10 dlv
10 -10 dlv
11 -5 dlv
20 0 dlv
10 5 dlv
10 10 dlv
5 10 dlv
5 15 dlv
0 26 dlv
-5 15 dlv
-5 10 dlv
-10 10 dlv
-10 5 dlv
-20 0 dlv
dle
3061 3788 dlt
0 -76 dlv
5 -15 dlv
10 -10 dlv
15 -5 dlv
10 0 dlv
16 5 dlv
10 10 dlv
5 15 dlv
0 76 dlv
dle
0 -106 3193 3788 dls
71 0 3157 3788 dls
2769 1228 dlt
0 -57 dlv
-3 -10 dlv
-4 -4 dlv
-7 -3 dlv
-11 0 dlv
-7 3 dlv
dle
2769 1218 dlt
-7 7 dlv
-7 3 dlv
-11 0 dlv
-7 -3 dlv
-7 -7 dlv
-3 -11 dlv
0 -7 dlv
3 -11 dlv
7 -7 dlv
7 -3 dlv
11 0 dlv
7 3 dlv
7 7 dlv
dle
0 -49 2798 1228 dls
2798 1214 dlt
10 11 dlv
7 3 dlv
11 0 dlv
7 -3 dlv
4 -11 dlv
0 -35 dlv
dle
0 -74 2904 1253 dls
2904 1218 dlt
-7 7 dlv
-7 3 dlv
-11 0 dlv
-7 -3 dlv
-7 -7 dlv
-4 -11 dlv
0 -7 dlv
4 -11 dlv
7 -7 dlv
7 -3 dlv
11 0 dlv
7 3 dlv
7 7 dlv
dle
2723 5063 dlt
21 -50 dlv
22 50 dlv
dle
0 -75 2826 5088 dls
2826 5052 dlt
-7 8 dlv
-7 3 dlv
-11 0 dlv
-7 -3 dlv
-7 -8 dlv
-4 -10 dlv
0 -7 dlv
4 -11 dlv
7 -7 dlv
7 -4 dlv
11 0 dlv
7 4 dlv
7 7 dlv
dle
0 -75 2893 5088 dls
2893 5052 dlt
-7 8 dlv
-7 3 dlv
-10 0 dlv
-8 -3 dlv
-7 -8 dlv
-3 -10 dlv
0 -7 dlv
3 -11 dlv
7 -7 dlv
8 -4 dlv
10 0 dlv
7 4 dlv
7 7 dlv
dle
1000 0 0 slc
1000 0 0 sfc
2567 1349 2652 1434 dbs
1331 3107 dpb
1331 3298 dpv
1448 3298 dpv
1544 3202 dpv
1448 3107 dpv
dps
1331 1828 dpb
1331 2020 dpv
1448 2020 dpv
1544 1924 dpv
1448 1828 dpv
dps
1331 4172 dpb
1331 4364 dpv
1448 4364 dpv
1544 4268 dpv
1448 4172 dpv
dps
3355 3639 dpb
3355 3831 dpv
3472 3831 dpv
3568 3735 dpv
3472 3639 dpv
dps
2567 4758 2652 4843 dbs
2567 3906 2652 3991 dbs
2567 4545 2652 4630 dbs
2141 4225 2226 4310 dbs
2567 3479 2652 3565 dbs
2567 2840 2652 2926 dbs
2141 3160 2226 3245 dbs
2567 2840 2652 2926 dbs
2567 2201 2652 2286 dbs
2141 2521 2226 2606 dbs
2567 2201 2652 2286 dbs
2567 1562 2652 1647 dbs
2141 1882 2226 1967 dbs
0 966 4600 5685 clwin
gfs
%%Trailer
%%EOF
