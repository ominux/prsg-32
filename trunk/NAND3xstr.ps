%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
150 150 4600 6660 600 pap
%%Page: cds 1
gis
0 0 4251 1349 clwin
ssls
0 0 0 slc
0 0 0 sfc
71 1298 dlt
0 -58 dlv
2 -14 dlv
4 -10 dlv
10 -2 dlv
22 0 dlv
10 2 dlv
4 10 dlv
2 14 dlv
0 58 dlv
dle
149 1228 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 8 dlv
0 14 dlv
0 8 dlv
-8 6 dlv
-36 4 dlv
-4 6 dlv
-2 8 dlv
0 10 dlv
2 8 dlv
6 6 dlv
32 0 dlv
8 -6 dlv
2 -8 dlv
dle
273 1214 dlt
-48 0 dlv
0 84 dlv
48 0 dlv
dle
-46 0 271 1258 dls
297 1214 dlt
0 84 dlv
42 0 dlv
8 -6 dlv
0 -8 dlv
0 -20 dlv
0 -8 dlv
-8 -6 dlv
-42 0 dlv
dle
339 1250 dlt
8 -4 dlv
0 -10 dlv
0 -22 dlv
dle
377 1262 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
377 1222 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
0 60 423 1214 dls
423 1256 dlt
6 12 dlv
6 6 dlv
12 0 dlv
6 -6 dlv
4 -14 dlv
dle
0 60 481 1214 dls
481 1256 dlt
4 12 dlv
6 6 dlv
14 0 dlv
6 -6 dlv
4 -12 dlv
0 -42 dlv
dle
515 1256 dlt
4 12 dlv
6 6 dlv
14 0 dlv
6 -6 dlv
4 -12 dlv
0 -42 dlv
dle
573 1246 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
0 60 639 1214 dls
639 1256 dlt
6 12 dlv
6 6 dlv
12 0 dlv
6 -6 dlv
4 -14 dlv
dle
38 0 697 1274 dls
707 1290 dlt
0 -64 dlv
4 -10 dlv
8 -2 dlv
6 0 dlv
8 2 dlv
4 10 dlv
0 10 dlv
dle
761 1246 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
0 60 827 1214 dls
827 1256 dlt
4 12 dlv
6 6 dlv
20 0 dlv
8 -6 dlv
2 -12 dlv
0 -42 dlv
dle
893 1282 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
71 1079 dlt
0 84 dlv
40 0 dlv
10 -2 dlv
6 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-12 -2 dlv
-40 0 dlv
dle
153 1079 dlt
30 84 dlv
32 -84 dlv
dle
-44 0 205 1101 dls
50 0 239 1163 dls
0 -84 265 1163 dls
361 1079 dlt
-48 0 dlv
0 84 dlv
48 0 dlv
dle
-46 0 359 1123 dls
391 1127 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
391 1087 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
435 1163 dlt
24 -84 dlv
24 84 dlv
24 -84 dlv
24 84 dlv
dle
553 1111 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
661 1121 dlt
-2 12 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
22 0 dlv
8 6 dlv
2 10 dlv
dle
0 -84 661 1163 dls
703 1079 dlt
0 84 dlv
40 0 dlv
10 -2 dlv
6 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-12 -2 dlv
-40 0 dlv
dle
785 1111 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
891 1121 dlt
-2 12 dlv
-8 6 dlv
-20 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
20 0 dlv
8 6 dlv
2 10 dlv
dle
991 1125 dlt
10 -6 dlv
0 -8 dlv
0 -18 dlv
0 -8 dlv
-8 -6 dlv
-34 0 dlv
-6 6 dlv
-2 8 dlv
0 18 dlv
2 8 dlv
8 6 dlv
30 0 dlv
8 4 dlv
2 10 dlv
0 10 dlv
-2 8 dlv
-8 6 dlv
-30 0 dlv
-6 -6 dlv
-2 -8 dlv
0 -10 dlv
2 -8 dlv
6 -6 dlv
dle
1043 1133 dlt
24 30 dlv
0 -84 dlv
dle
1093 1147 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
1171 1127 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
1171 1087 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
1199 1133 dlt
24 30 dlv
0 -84 dlv
dle
1265 1079 dlt
-12 2 dlv
-4 10 dlv
-2 16 dlv
0 28 dlv
2 18 dlv
4 8 dlv
12 2 dlv
18 0 dlv
10 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-10 -2 dlv
-20 0 dlv
dle
52 84 1247 1079 dls
1329 1127 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
1329 1087 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
1359 1147 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
1481 1147 dlt
0 10 dlv
-8 6 dlv
-34 0 dlv
-6 -6 dlv
-2 -10 dlv
0 -52 dlv
2 -10 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 10 dlv
0 16 dlv
0 10 dlv
-8 6 dlv
-32 0 dlv
-6 -6 dlv
-4 -12 dlv
dle
1525 1147 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
1615 1079 dlt
-12 2 dlv
-4 10 dlv
-2 16 dlv
0 28 dlv
2 18 dlv
4 8 dlv
12 2 dlv
18 0 dlv
10 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-10 -2 dlv
-20 0 dlv
dle
52 84 1597 1079 dls
1673 1133 dlt
24 30 dlv
0 -84 dlv
dle
1739 1079 dlt
-12 2 dlv
-4 10 dlv
-2 16 dlv
0 28 dlv
2 18 dlv
4 8 dlv
12 2 dlv
18 0 dlv
10 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-10 -2 dlv
-20 0 dlv
dle
52 84 1721 1079 dls
71 944 dlt
0 84 dlv
42 0 dlv
8 -4 dlv
2 -10 dlv
0 -20 dlv
-2 -8 dlv
-8 -6 dlv
-42 0 dlv
dle
147 1028 dlt
0 -84 dlv
42 0 dlv
dle
231 944 dlt
-12 2 dlv
-4 10 dlv
-2 16 dlv
0 28 dlv
2 18 dlv
4 8 dlv
12 2 dlv
22 0 dlv
12 -2 dlv
6 -10 dlv
2 -16 dlv
0 -28 dlv
-2 -16 dlv
-6 -10 dlv
-12 -2 dlv
-22 0 dlv
dle
50 0 297 1028 dls
0 -84 323 1028 dls
389 958 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 8 dlv
0 14 dlv
0 8 dlv
-8 6 dlv
-36 4 dlv
-4 6 dlv
-2 8 dlv
0 10 dlv
2 8 dlv
6 6 dlv
32 0 dlv
8 -6 dlv
2 -8 dlv
dle
0 84 465 944 dls
491 1028 dlt
50 0 dlv
-52 -84 dlv
54 0 dlv
dle
615 944 dlt
-48 0 dlv
0 84 dlv
48 0 dlv
dle
-46 0 613 988 dls
645 992 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
645 952 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
691 1028 dlt
52 0 dlv
-38 -84 dlv
dle
777 944 dlt
-4 0 dlv
0 8 dlv
4 0 dlv
0 -8 dlv
dle
803 1012 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
893 944 dlt
-12 2 dlv
-4 10 dlv
-2 16 dlv
0 28 dlv
2 18 dlv
4 8 dlv
12 2 dlv
18 0 dlv
10 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-10 -2 dlv
-20 0 dlv
dle
52 84 875 944 dls
40 60 969 944 dls
40 -60 971 1004 dls
1053 998 dlt
24 30 dlv
0 -84 dlv
dle
1101 998 dlt
24 30 dlv
0 -84 dlv
dle
1159 944 dlt
-4 0 dlv
0 8 dlv
4 0 dlv
0 -8 dlv
dle
1183 998 dlt
24 30 dlv
0 -84 dlv
dle
1249 944 dlt
-12 2 dlv
-4 10 dlv
-2 16 dlv
0 28 dlv
2 18 dlv
4 8 dlv
12 2 dlv
18 0 dlv
10 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-10 -2 dlv
-20 0 dlv
dle
52 84 1231 944 dls
0 84 1325 944 dls
0 60 1349 944 dls
1349 986 dlt
4 12 dlv
6 6 dlv
20 0 dlv
8 -6 dlv
2 -12 dlv
0 -42 dlv
dle
1453 986 dlt
-2 12 dlv
-8 6 dlv
-20 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
20 0 dlv
8 6 dlv
2 10 dlv
dle
0 84 1477 944 dls
1477 986 dlt
4 12 dlv
6 6 dlv
18 0 dlv
8 -6 dlv
4 -12 dlv
0 -42 dlv
dle
1541 976 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
1607 956 dlt
4 -10 dlv
6 -2 dlv
20 0 dlv
8 2 dlv
2 6 dlv
0 14 dlv
-2 6 dlv
-8 4 dlv
-20 0 dlv
-6 2 dlv
-4 6 dlv
0 10 dlv
4 6 dlv
6 4 dlv
20 0 dlv
8 -4 dlv
2 -8 dlv
dle
71 893 dlt
0 -84 dlv
42 0 dlv
dle
0 60 137 809 dls
0 8 137 885 dls
0 84 161 809 dls
161 851 dlt
4 12 dlv
6 6 dlv
22 0 dlv
8 -6 dlv
2 -14 dlv
0 -20 dlv
-2 -14 dlv
-8 -6 dlv
-22 0 dlv
-6 6 dlv
-4 10 dlv
dle
0 60 227 809 dls
227 851 dlt
6 12 dlv
6 6 dlv
12 0 dlv
6 -6 dlv
4 -14 dlv
dle
285 857 dlt
4 8 dlv
6 4 dlv
18 0 dlv
8 -4 dlv
4 -8 dlv
0 -48 dlv
dle
325 835 dlt
-4 4 dlv
-6 4 dlv
-22 0 dlv
-4 -4 dlv
-4 -4 dlv
0 -18 dlv
4 -6 dlv
4 -2 dlv
22 0 dlv
6 2 dlv
4 6 dlv
dle
0 60 349 809 dls
349 851 dlt
6 12 dlv
6 6 dlv
12 0 dlv
6 -6 dlv
4 -14 dlv
dle
407 869 dlt
20 -60 dlv
20 60 dlv
dle
427 809 dlt
-4 -12 dlv
-6 -8 dlv
-4 0 dlv
dle
477 857 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
477 817 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
0 80 541 789 dls
541 851 dlt
4 12 dlv
6 6 dlv
22 0 dlv
6 -6 dlv
4 -14 dlv
0 -20 dlv
-2 -14 dlv
-8 -6 dlv
-22 0 dlv
-6 6 dlv
-4 12 dlv
dle
0 60 607 809 dls
607 851 dlt
6 12 dlv
6 6 dlv
12 0 dlv
6 -6 dlv
4 -14 dlv
dle
675 809 dlt
-6 6 dlv
-4 14 dlv
0 22 dlv
4 12 dlv
6 6 dlv
22 0 dlv
8 -6 dlv
2 -14 dlv
0 -20 dlv
-2 -14 dlv
-8 -6 dlv
-22 0 dlv
dle
731 789 dlt
6 2 dlv
4 8 dlv
0 70 dlv
dle
0 8 741 885 dls
765 841 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
871 851 dlt
-2 12 dlv
-8 6 dlv
-20 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
20 0 dlv
8 6 dlv
2 10 dlv
dle
38 0 895 869 dls
905 885 dlt
0 -64 dlv
4 -10 dlv
8 -2 dlv
6 0 dlv
8 2 dlv
4 10 dlv
0 10 dlv
dle
127 736 dlt
-2 12 dlv
-4 8 dlv
-10 2 dlv
-24 0 dlv
-10 -2 dlv
-4 -10 dlv
-2 -16 dlv
0 -28 dlv
2 -18 dlv
4 -8 dlv
10 -2 dlv
24 0 dlv
10 2 dlv
4 10 dlv
2 10 dlv
dle
151 706 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
0 84 217 674 dls
0 84 241 674 dls
271 722 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
271 682 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
0 60 551 674 dls
551 716 dlt
4 12 dlv
6 6 dlv
20 0 dlv
8 -6 dlv
2 -12 dlv
0 -42 dlv
dle
615 722 dlt
4 8 dlv
6 4 dlv
18 0 dlv
8 -4 dlv
4 -8 dlv
0 -48 dlv
dle
655 700 dlt
-4 4 dlv
-6 4 dlv
-22 0 dlv
-4 -4 dlv
-4 -4 dlv
0 -18 dlv
4 -6 dlv
4 -2 dlv
22 0 dlv
6 2 dlv
4 6 dlv
dle
0 60 679 674 dls
679 716 dlt
4 12 dlv
6 6 dlv
20 0 dlv
8 -6 dlv
2 -12 dlv
0 -42 dlv
dle
785 716 dlt
-2 12 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
22 0 dlv
8 6 dlv
2 10 dlv
dle
0 -84 785 758 dls
809 744 dlt
2 8 dlv
6 6 dlv
34 0 dlv
8 -6 dlv
0 -8 dlv
0 -10 dlv
0 -10 dlv
-8 -4 dlv
-24 0 dlv
dle
851 720 dlt
8 -6 dlv
0 -12 dlv
0 -12 dlv
0 -10 dlv
-8 -6 dlv
-34 0 dlv
-6 6 dlv
-2 10 dlv
dle
40 60 883 674 dls
40 -60 885 734 dls
949 686 dlt
4 -10 dlv
6 -2 dlv
20 0 dlv
8 2 dlv
2 6 dlv
0 14 dlv
-2 6 dlv
-8 4 dlv
-20 0 dlv
-6 2 dlv
-4 6 dlv
0 10 dlv
4 6 dlv
6 4 dlv
20 0 dlv
8 -4 dlv
2 -8 dlv
dle
38 0 1013 734 dls
1023 750 dlt
0 -64 dlv
4 -10 dlv
8 -2 dlv
6 0 dlv
8 2 dlv
4 10 dlv
0 10 dlv
dle
0 60 1077 674 dls
1077 716 dlt
6 12 dlv
6 6 dlv
12 0 dlv
6 -6 dlv
4 -14 dlv
dle
71 623 dlt
28 -84 dlv
30 84 dlv
dle
0 60 153 539 dls
0 8 153 615 dls
177 571 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
243 599 dlt
16 -60 dlv
14 60 dlv
16 -60 dlv
16 60 dlv
dle
335 587 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
335 547 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
561 551 dlt
4 -10 dlv
6 -2 dlv
20 0 dlv
8 2 dlv
2 6 dlv
0 14 dlv
-2 6 dlv
-8 4 dlv
-20 0 dlv
-6 2 dlv
-4 6 dlv
0 10 dlv
4 6 dlv
6 4 dlv
20 0 dlv
8 -4 dlv
2 -8 dlv
dle
665 581 dlt
-2 12 dlv
-8 6 dlv
-20 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
20 0 dlv
8 6 dlv
2 10 dlv
dle
0 84 689 539 dls
689 581 dlt
4 12 dlv
6 6 dlv
18 0 dlv
8 -6 dlv
4 -12 dlv
0 -42 dlv
dle
753 571 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
0 60 819 539 dls
819 581 dlt
4 12 dlv
6 6 dlv
14 0 dlv
6 -6 dlv
4 -12 dlv
0 -42 dlv
dle
853 581 dlt
4 12 dlv
6 6 dlv
14 0 dlv
6 -6 dlv
4 -12 dlv
0 -42 dlv
dle
911 587 dlt
4 8 dlv
6 4 dlv
18 0 dlv
8 -4 dlv
4 -8 dlv
0 -48 dlv
dle
951 565 dlt
-4 4 dlv
-6 4 dlv
-22 0 dlv
-4 -4 dlv
-4 -4 dlv
0 -18 dlv
4 -6 dlv
4 -2 dlv
22 0 dlv
6 2 dlv
4 6 dlv
dle
38 0 975 599 dls
985 615 dlt
0 -64 dlv
4 -10 dlv
8 -2 dlv
6 0 dlv
8 2 dlv
4 10 dlv
0 10 dlv
dle
0 60 1039 539 dls
0 8 1039 615 dls
1103 581 dlt
-2 12 dlv
-8 6 dlv
-20 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
20 0 dlv
8 6 dlv
2 10 dlv
dle
71 403 dlt
0 84 dlv
42 0 dlv
8 -4 dlv
2 -10 dlv
0 -20 dlv
-2 -8 dlv
-8 -6 dlv
-42 0 dlv
dle
0 84 147 403 dls
181 403 dlt
-6 6 dlv
-4 14 dlv
0 22 dlv
4 12 dlv
6 6 dlv
22 0 dlv
8 -6 dlv
2 -14 dlv
0 -20 dlv
-2 -14 dlv
-8 -6 dlv
-22 0 dlv
dle
38 0 237 463 dls
247 479 dlt
0 -64 dlv
4 -10 dlv
8 -2 dlv
6 0 dlv
8 2 dlv
4 10 dlv
0 10 dlv
dle
319 403 dlt
30 84 dlv
32 -84 dlv
dle
-44 0 371 425 dls
0 60 405 403 dls
405 445 dlt
6 12 dlv
6 6 dlv
12 0 dlv
6 -6 dlv
4 -14 dlv
dle
463 435 dlt
42 0 dlv
0 8 dlv
-2 14 dlv
-8 6 dlv
-22 0 dlv
-6 -6 dlv
-4 -14 dlv
0 -20 dlv
4 -14 dlv
6 -6 dlv
24 0 dlv
6 8 dlv
dle
529 451 dlt
4 8 dlv
6 4 dlv
18 0 dlv
8 -4 dlv
4 -8 dlv
0 -48 dlv
dle
569 429 dlt
-4 4 dlv
-6 4 dlv
-22 0 dlv
-4 -4 dlv
-4 -4 dlv
0 -18 dlv
4 -6 dlv
4 -2 dlv
22 0 dlv
6 2 dlv
4 6 dlv
dle
599 451 dlt
0 8 dlv
4 0 dlv
0 -8 dlv
-4 0 dlv
dle
599 411 dlt
4 0 dlv
0 -8 dlv
-4 0 dlv
0 8 dlv
dle
681 487 dlt
-12 -2 dlv
-4 -8 dlv
-2 -18 dlv
0 -28 dlv
2 -16 dlv
4 -10 dlv
12 -2 dlv
dle
723 487 dlt
-12 -2 dlv
-4 -8 dlv
-2 -18 dlv
0 -28 dlv
2 -16 dlv
4 -10 dlv
12 -2 dlv
dle
42 0 751 439 dls
839 403 dlt
-12 2 dlv
-4 10 dlv
-2 16 dlv
0 28 dlv
2 18 dlv
4 8 dlv
12 2 dlv
18 0 dlv
10 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-10 -2 dlv
-20 0 dlv
dle
52 84 821 403 dls
907 403 dlt
-4 0 dlv
0 8 dlv
4 0 dlv
0 -8 dlv
dle
931 487 dlt
52 0 dlv
-38 -84 dlv
dle
1009 471 dlt
2 10 dlv
6 6 dlv
30 0 dlv
8 -6 dlv
2 -10 dlv
0 -12 dlv
-2 -10 dlv
-8 -6 dlv
-30 -6 dlv
-6 -6 dlv
-2 -10 dlv
-2 -18 dlv
50 0 dlv
dle
1081 417 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 12 dlv
0 22 dlv
0 10 dlv
-8 6 dlv
-32 0 dlv
-6 -6 dlv
-4 -8 dlv
0 42 dlv
50 0 dlv
dle
42 0 1177 439 dls
1265 403 dlt
-12 2 dlv
-4 10 dlv
-2 16 dlv
0 28 dlv
2 18 dlv
4 8 dlv
12 2 dlv
18 0 dlv
10 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-10 -2 dlv
-20 0 dlv
dle
52 84 1247 403 dls
1333 403 dlt
-4 0 dlv
0 8 dlv
4 0 dlv
0 -8 dlv
dle
1407 471 dlt
0 10 dlv
-8 6 dlv
-34 0 dlv
-6 -6 dlv
-2 -10 dlv
0 -52 dlv
2 -10 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 10 dlv
0 16 dlv
0 10 dlv
-8 6 dlv
-32 0 dlv
-6 -6 dlv
-4 -12 dlv
dle
1471 449 dlt
10 -6 dlv
0 -8 dlv
0 -18 dlv
0 -8 dlv
-8 -6 dlv
-34 0 dlv
-6 6 dlv
-2 8 dlv
0 18 dlv
2 8 dlv
8 6 dlv
30 0 dlv
8 4 dlv
2 10 dlv
0 10 dlv
-2 8 dlv
-8 6 dlv
-30 0 dlv
-6 -6 dlv
-2 -8 dlv
0 -10 dlv
2 -8 dlv
6 -6 dlv
dle
1505 487 dlt
52 0 dlv
-38 -84 dlv
dle
1581 417 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 12 dlv
0 22 dlv
0 10 dlv
-8 6 dlv
-32 0 dlv
-6 -6 dlv
-4 -8 dlv
0 42 dlv
50 0 dlv
dle
1655 487 dlt
12 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-12 -2 dlv
dle
1733 487 dlt
-12 -2 dlv
-4 -8 dlv
-2 -18 dlv
0 -28 dlv
2 -16 dlv
4 -10 dlv
12 -2 dlv
dle
1775 403 dlt
-12 2 dlv
-4 10 dlv
-2 16 dlv
0 28 dlv
2 18 dlv
4 8 dlv
12 2 dlv
18 0 dlv
10 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-10 -2 dlv
-20 0 dlv
dle
52 84 1757 403 dls
1843 403 dlt
-4 0 dlv
0 8 dlv
4 0 dlv
0 -8 dlv
dle
1867 419 dlt
2 -10 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 10 dlv
0 52 dlv
0 10 dlv
-8 6 dlv
-34 0 dlv
-6 -6 dlv
-2 -10 dlv
0 -14 dlv
2 -12 dlv
6 -6 dlv
32 0 dlv
8 6 dlv
2 12 dlv
dle
1941 473 dlt
2 8 dlv
6 6 dlv
34 0 dlv
8 -6 dlv
0 -8 dlv
0 -10 dlv
0 -10 dlv
-8 -4 dlv
-24 0 dlv
dle
1983 449 dlt
8 -6 dlv
0 -12 dlv
0 -12 dlv
0 -10 dlv
-8 -6 dlv
-34 0 dlv
-6 6 dlv
-2 10 dlv
dle
2015 487 dlt
52 0 dlv
-38 -84 dlv
dle
2091 417 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 12 dlv
0 22 dlv
0 10 dlv
-8 6 dlv
-32 0 dlv
-6 -6 dlv
-4 -8 dlv
0 42 dlv
50 0 dlv
dle
2183 457 dlt
24 30 dlv
0 -84 dlv
dle
2241 403 dlt
-4 0 dlv
0 8 dlv
4 0 dlv
0 -8 dlv
dle
2305 449 dlt
10 -6 dlv
0 -8 dlv
0 -18 dlv
0 -8 dlv
-8 -6 dlv
-34 0 dlv
-6 6 dlv
-2 8 dlv
0 18 dlv
2 8 dlv
8 6 dlv
30 0 dlv
8 4 dlv
2 10 dlv
0 10 dlv
-2 8 dlv
-8 6 dlv
-30 0 dlv
-6 -6 dlv
-2 -8 dlv
0 -10 dlv
2 -8 dlv
6 -6 dlv
dle
2339 487 dlt
52 0 dlv
-38 -84 dlv
dle
2415 417 dlt
2 -8 dlv
6 -6 dlv
34 0 dlv
8 6 dlv
0 12 dlv
0 22 dlv
0 10 dlv
-8 6 dlv
-32 0 dlv
-6 -6 dlv
-4 -8 dlv
0 42 dlv
50 0 dlv
dle
2489 487 dlt
12 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-12 -2 dlv
dle
2531 487 dlt
12 -2 dlv
4 -8 dlv
2 -18 dlv
0 -28 dlv
-2 -16 dlv
-4 -10 dlv
-12 -2 dlv
dle
1349 4251 0 0 dbu
%!PS-Adobe-3.0
%%DocumentFonts: Helvetica Times-Roman Courier
%%Creator: Cadence Design Systems
%%EndComments
%%BeginProlog
%
% Start of Cadence ps.prologue -- Version 5.3.1
% Adobe Postscript Level 2 Color Version.
/setpacking where
{
	/currpack currentpacking def
	pop true setpacking
} if
%******************************************************************************
% Graphics initialization routine.
%
/gis  {
  0 setgray
  save
  mark
  newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
  72 resolution div
  dup
  scale

%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
  offsetX offsetY translate

  /stippleArray 10 array def
    stippleArray
     dup    0  <FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
                FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF> put
     dup    1  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    2  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    3  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    4  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    5  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    6  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    7  <00000000000000000000000000000000
                00000000000000000000000000000000> put
     dup    8  <08080404020201018080404020201010
		08080404020201018080404020201010> put
            9  <08081414222241418080414122221414
                08081414222241418080414122221414> put

  /newFont 10 dict def
  newFont begin

    /FontType 3 def
    /FontMatrix [1 0 0 1 0 0] def
    /FontBBox [0 0 1 1] def

    /Encoding 256 array def
    0 1 255 {Encoding exch /.notdef put} for
    Encoding
      dup 48 /0  put
      dup 49 /1  put
      dup 50 /2  put
      dup 51 /3  put
      dup 52 /4  put
      dup 53 /5  put
      dup 54 /6  put
      dup 55 /7  put
      dup 56 /8  put
          57 /9  put


    /BuildChar {
        /char exch def
        /fontdict exch def
        /charname fontdict /Encoding get char get def

         1 0 setcharwidth

          16 16 true
          [16 0 0 -16 -.5 15.50]
           stippleArray char 48 sub 1 getinterval cvx
          imagemask
    } def

  end
  /StippleFont newFont definefont 66 scalefont setfont
  /fillChar 0 def

  /ellipsedict 8 dict def
  ellipsedict /mtrx matrix put

  /xformdict 8 dict def
  xformdict /xformmtrx matrix put

  /color     0 def

  /lineRed   0 def
  /lineGreen 0 def
  /lineBlue  0 def

  /fillRed   0 def
  /fillGreen 0 def
  /fillBlue  0 def

  /hatchSet  0 def

  /rht 0 def
  /rw 0 def
  /ils 1.0 def
  /textalign 1 def

} bind def

%******************************************************************************
% Paper call.  Sets resolution page height and page width.
%
/pap {
    /resolution exch def
    /pageHeight exch def
    /pageWidth exch def
    /offsetY exch def
    /offsetX exch def

  } bind def

%******************************************************************************
% Plot is done.
%
/gfs  {
    showpage
    cleartomark
    restore
  } bind def

%******************************************************************************
% Next Page sequence.
%
/nxp  {

    showpage
    newpath

%
% Scale postscripts 72 dpi divided by the plotter resolution set in pap.
%
    72 resolution div
    dup
    scale
%
% Move the origin of the plot up and to the right so the plotters margin
% is observed.
%
    offsetX offsetY translate
    /ils 1.0 def
    /textalign 1 def
  } bind def

%******************************************************************************
% Rotate Plot Sequence.
%
/rotp  {
  pageWidth 0  translate  %% This moves lower left of plot to
                          %% lower right of page.

  90 rotate    %% rotate plot 90 degs.
} bind def
%******************************************************************************
% Clipping Window
%
/clwin  {
    initclip
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    clip
} bind def
%******************************************************************************
% These to routines keep track of the bounding box of the shape.
% This information is used when filling the drawn shape.
%
/bblineto {
  dup dup
  /cury exch def
  miny lt {/miny exch def}
    {dup maxy gt { /maxy exch def }
           {pop } ifelse } ifelse
  dup dup
  minx lt {/minx exch def}
    {dup maxx gt { /maxx exch def }
           { pop } ifelse } ifelse
  cury lineto
} bind def

/bbmoveto {
  dup dup
  /miny exch def /maxy exch def /cury exch def
  dup dup
  /minx exch def /maxx exch def
  cury moveto
} bind def
%******************************************************************************
% Internal ellipical arc routine.
%    x y xradius yradius startangle endangle ellipse
%
/ellipse
  {
    /endangle exch def
    /startangle exch def
    /yrad exch def
    /xrad exch def
    /y exch def
    /x exch def

    startangle endangle gt {
      save
      /tmpangle startangle def
      /startangle endangle def
      /endangle tmpangle def
      restore
    } if

    ellipsedict begin
      /savematrix mtrx currentmatrix def
      x y translate
      xrad yrad scale
      0 0 1 startangle endangle arc
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Scale Sequence
%    x y rfss
%
/rfss  {
    4 2 roll
    dup
    3 div
    add
    scalefont
    setfont
    0 color ne {setLineColor}
               { 0 setgray } ifelse
  } bind def
%******************************************************************************
% Resident Font End
%
%
/rfe
{
/width exch def
5 1 roll
moveto

xformdict begin
/savematrix xformmtrx currentmatrix def

exch 				% rotate mirror to mirror rotate
matrix rotate concat		% add rotation to current transform matrix
dup 1 eq
	{pop 1 -1}		% X mirror

	{2 eq
		{-1 1}		% Y mirror
		{1 1}		% No mirror
	ifelse}
ifelse matrix scale concat	% add mirror to current transform matrix


dup				% duplicate (string)
length				% replace one of the strings with its length
dup 0 ne
{
	3 -1 roll		% move fixed width flag to top of stack
	0 eq
	{			% if flag is false (0) do old string handling
		/numChr exch def
		dup stringwidth	%stack  wy,wx,(string)
		pop
		width
		exch sub	%stack  xdiff,ydiff,(string)

		cvi
		numChr idiv	%stack  xspace,ydiff,(string)

		/xoff exch def

		{		% this is the positioning  function for kshow
			pop pop
			xoff
			0
			rmoveto
		}

		exch
		kshow
	}

	{			% if flag is true (not 0) just show string
		pop show
	}
	ifelse
}

{
	pop pop pop
}
ifelse
      savematrix setmatrix
    end
  } bind def
%******************************************************************************
% Resident Font Text Alignment
%
/rfta {						% <align> rfta
	/textalign exch def
} bind def
%******************************************************************************
% Resident Font Interline Space
%
/rfis {						% <space> rfis
	/ils exch def
} bind def
%******************************************************************************
% Resident Font Scale
%
/rfsc {						% <ht> <rotate> <mirror> rfs
% What I need to do here is to validate <ht>.  <ht> can not be 0.  If it is 0
% then make it 1.  To do this I will need to use the roll operation and exch
% and maybe dup.  The algorithm looks like this:
% Roll stack to make it look like : <rotate> <mirror> <ht>
% duplicate <ht> so I can test it.
% If <ht> is equal to 0 then
% exchange 1 for <ht>
% In any case roll stack to make it look like: <ht> <rotate> <mirror>
% qed.
%
	3 -1 roll		% <rotate> <mirror> <ht>
	dup 0 eq
	{
		1 exch pop	% <rotate> <mirror> <ht=1>
	}
	if
	3 1 roll		% <ht> <rotate> <mirror>

	0 color ne
	{
		setLineColor
	}
	{
		0 setgray
	}
	ifelse

	/tasz 60 def
	/taln 59 def

	/ta tasz array def
	/cta ta def
	/tc 0 def
	/sa tasz array def
	/sc 0 def
} bind def
%******************************************************************************
% Resident Font Restricted Text
%
/rfrt {						% <height> <width> rfrt
	/rht exch def
	/rw exch def
	% Since restricting one dimension and not the other is not supported
	% if one dimension is turned off then ensure that both dimensions
	% are turned off (a value of 0 means no restriction)
	rht 0 eq rw 0 eq or
	{
		/rht 0 def
		/rw 0 def
	}
	if
} bind def
%******************************************************************************
% Resident Font Text Score
%
/rfts {						% <score> <start> <end> rfts
	sc tasz lt
	{
		3 -1 roll 3 array astore
		sa sc 3 -1 roll put
		/sc sc 1 add def
	}
	{
		pop pop pop
	} ifelse
} bind def
%******************************************************************************
% Resident Font Text
%
/rft {						% (text) rft
	tc taln gt tc tasz mod 0 eq and
	{
		cta /cta tasz array dup def put
	} if

	tc tasz mod exch cta 3 1 roll sc
	sa dup length array copy
	3 array astore put

	/sc 0 def
	/tc tc 1 add def
} bind def
%******************************************************************************
% Resident Font Complete
%
/rfc {						% <x> <y> rfc
	/cta ta def

	%
	% If text is restricted or if text alignment is not left, find the
	% longest text string
	%
	/mw 0 def
	rw 0 ne textalign 3 gt or
	{
		%
		% Find the widest text string
		%
		5 index		% <fn> <ht> <rot> <mir> <x> <y> <fn>
		setfont
		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			tasz mod cta exch get 0 get
			stringwidth pop dup mw gt
			{
				/mw exch def null
			}
			if

			pop
		}
		for

		/cta ta def
	}
	if

	%
	% Operand stack:		<fn> <ht> <rot> <mir> <x> <y>
	% Check for restricted text
	%
	rw 0 ne
	{

		%
		% Compute font scale factors
		%
		6 -2 roll pop		% <rot> <mir> <x> <y> <fn>
		rw mw div
		rht tc div dup ils mul 0.5 add cvi /tht exch def
		matrix scale makefont	% <rot> <mir> <x> <y> <fn>
		/mw rw def
	}
	{
		6 -2 roll		% <rot> <mir> <x> <y> <fn> <ht>
		dup 0 eq		% Test if height is 0
		{			% change to 1 if it is
                	1 exch pop	% <rot> <mir> <x> <y> <fn> <1>
		}
		if
		dup ils mul 0.5 add cvi /tht exch def
		dup mw mul /mw exch def scalefont
	}
	ifelse

	setfont				% <rot> <mir> <x> <y>

	moveto			% <rot> <mir>

	xformdict begin
		/savematrix xformmtrx currentmatrix def

		exch matrix rotate concat
		dup 1 eq
		{
			pop 1.0 -1.0		% x mirror
		}
		{
			2 eq
			{
				-1.0 1.0	% y mirror
			}
			{
				1.0 1.0		% no mirror
			}
			ifelse
		}
		ifelse
		matrix scale concat

		currentpoint

		%
		% Adjust origin for text alignment. For lc (4), cc (5), and uc
		% (6) move left by width / 2. For lr (7), cr (8), and ur (9)
		% move left by width. For cl (2), cc (5), and cr (8) move down
		% by height / 2. For ul (3), uc (6), and ur (9) move down by
		% height.
		%
		textalign 2 eq textalign 5 eq or textalign 8 eq or
		{
			tht tc mul 2 div sub
		} if
		textalign 3 eq textalign 6 eq or textalign 9 eq or
		{
			tht tc mul sub
		} if
		/oy exch def

		textalign 3 gt textalign 7 lt and
		{
			mw 2 div sub
		} if
		textalign 6 gt textalign 10 lt and
		{
			mw sub
		} if
		/ox exch def

		0 1 tc 1 sub
		{
			dup taln gt 1 index tasz mod 0 eq and
			{
				/cta cta tasz get def
			}
			if

			cta exch tasz mod get aload pop
			dup 3 -1 roll	% (str) [score] [score] <cnt>
			0 1 3 -1 roll 1 sub	% (str) [score] [score] 0 1 <cnt>
			{
				newpath ox oy moveto
				get aload pop pop exch	% ... <len> <start>
				dup 0 exch		% ... <len> <start> 0 <s
				5 index 3 1 roll	% ... (str) 0 <start>
				getinterval		% ... <len> <start> (.)
				stringwidth pop tht rmoveto
				3 index			% ... <len> <start> (str)
				3 1 roll exch		% ... (str) <start> <len>
%				dup 3 1 roll
%				sub
				getinterval stringwidth pop
				0 rlineto stroke
				dup
			}
			for
			pop pop
			ox oy moveto
			show

			%
			% Move origin for next line
			%
			/oy oy tht sub def
		}
		for

		savematrix setmatrix
	end
	pop					% throw away the "0"
} bind def
%******************************************************************************
% Draw line sequence.
%
/dls  {
  newpath
  moveto
  rlineto
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  stroke
  grestore
} bind def
%******************************************************************************
% Draw line to.
%
/dlt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dslt  {
  newpath
  gsave
  0 color ne { setLineColor }
             { 0 setgray } ifelse
  moveto
} bind def
%******************************************************************************
%
/dlv  {
  rlineto
} bind def
%******************************************************************************
%
/dle  {
  stroke
  grestore
} bind def
%******************************************************************************
% Move to.
/mps {
  newpath
  moveto
} bind def
%******************************************************************************
%
% Draw Box Unfilled
%    x1 y1 x2 y2 dbu
%
/dbu  {
    0 color ne { setLineColor } if
    newpath
    moveto
    dup 0 rlineto
    0 3 -1 roll
    rlineto
    neg 0 rlineto
    closepath
    stroke
  } bind def
%******************************************************************************
%
% Draw Box Filled
%    x1 y1 x2 y2 dbf
%
/dbf  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 bbmoveto
    x2 y1 bblineto
    x2 y2 bblineto
    x1 y2 bblineto
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def
%******************************************************************************
% Draw Box Solid
%    x1 y1 x2 y2 dsb
%
/dbs  {
    /y2 exch def
    /x2 exch def
    /y1 exch def
    /x1 exch def
    newpath
    x1 y1 moveto
    x2 y1 lineto
    x2 y2 lineto
    x1 y2 lineto
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Begin
%    x y dpb
%
/dpb  {
    newpath bbmoveto
  } bind def

%******************************************************************************
% Draw Polygon Unfilled
%    x y dpu
%
/dpu  {
      closepath
      gsave
      0 color ne { setLineColor } if
      stroke
      grestore
   } bind def

%******************************************************************************
% Draw Polygon Filled
%    x y dpf
%
/dpf  {
    closepath
    gsave
    0 color ne { setFillColor } if
    clip fillpath grestore
  } bind def

%******************************************************************************
% Draw Polygon Solid
%    x y dps
%
/dps  {
    closepath
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne { setLineColor } if stroke
  } bind def

%******************************************************************************
% Draw Polygon Vertex
%    x y dpv
%
/dpv  {
    bblineto
  } bind def

%******************************************************************************
% Draw Circle Unfilled
%    x y radius dcu
%
/dcu  {
    /radius exch def
    /y exch def
    /x exch def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Circle Filled
%    x y radius dcs
%
/dcf  {
    /radius exch def
    /y exch def
    /x exch def
    /minx x radius sub def
    /miny y radius sub def
    /maxx x radius add def
    /maxy y radius add def

    newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Circle Solid
%    x y radius dcs
%
/dcs  {
    /radius exch def
    /y exch def
    /x exch def

          newpath
    x y radius radius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse
    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Ellipse Unfilled
%    x y xradius yradius deu
%
/delu  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setLineColor } if
    stroke
    grestore
  } bind def
%******************************************************************************
% Draw Ellipse Filled
%    x y xradius yradius def
%
/delf  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def
    /minx x xradius sub def
    /miny y yradius sub def
    /maxx x xradius add def
    /maxy y yradius add def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor } if
    clip fillpath
    grestore
  } bind def

%******************************************************************************
% Draw Ellipse Solid
%    x y xradius yradius des
%
/dels  {
    /yradius exch def
    /xradius exch def
    /y exch def
    /x exch def

    newpath
    x y xradius yradius 0 360 ellipse
    gsave
    0 color ne { setFillColor }
               { 0 setgray } ifelse

    fill grestore
    0 color ne {setLineColor} if stroke
  } bind def
%******************************************************************************
% Draw Arc Unfilled
%    x y xradius yradius startangle endangle das
%
/dau  { newpath ellipse
        gsave
        0 color ne { setLineColor } if
        stroke
        grestore
      } bind def
%******************************************************************************
% Line Define Code.
%
/setlinedash {
    1 index length 11 gt
    {exch dup length 11 sub 11 getinterval exch } if
    setdash
  } bind def

/lpb    {
    pop
    [
    /offset 0 def
    /offcount 0 def
    /oncount 0 def
  } bind def

/lpon  {
    /oncount exch def
    pop
    oncount
  } bind def

/lpoff  {
    /offcount exch def
    pop
    oncount 0 eq
    {/offset offcount def }
    { offcount } ifelse
  } bind def

/lpe  {
    /linewidth exch def
    pop
    offset 0 ne
    { offset } if ] 0 setlinedash
    linewidth dup 1 eq {pop 0} if setlinewidth
  } bind def

/sls    { pop } bind def

/ssls  { [] 0 setdash
          1 setlinewidth
        } bind def

%******************************************************************************
% Fill pattern define code.
%
/fillpath  {
    0 color ne { setFillColor } if
    /str 1 string def
    /minx minx 66 div
    truncate 66 mul def
    /miny miny 66 div
    truncate 66 mul def

          /fillLine maxx minx sub cvi 66 idiv 1 add string def

          0 1 fillLine length 1 sub {
            fillLine exch fillChar str cvs cvi 48 add put
          } for

          minx
          miny 66 maxy
            { exch dup 3 -1 roll moveto fillLine show
          } for pop

    hatchSet 1 eq {0 color ne { setLineColor } if stroke} if
} bind def


/fds  { pop /currchar 30 def} bind def
/fdf   {
    exch
    /char exch def
    /stipple stippleArray char get def
    stipple exch currchar
    exch putinterval
    stippleArray char stipple put
    /currchar currchar 2 sub def
  } bind def
/fde  {
    pop
  } bind def
/sfp  {
    /fillChar exch def
    /hatchSet 0 def
    fillChar 8 ge {/hatchSet 1 def} if
    /StippleFont findfont 66 scalefont setfont
  } bind def
/setLineColor {
  lineRed    1000 div
  lineGreen  1000 div
  lineBlue   1000 div
  setrgbcolor
} bind def

/setFillColor {
  fillRed    1000 div
  fillGreen  1000 div
  fillBlue   1000 div
  setrgbcolor
} bind def

/slc {
  /lineBlue  exch def
  /lineGreen exch def
  /lineRed   exch def
  /color 1 def
  lineBlue 1000 eq {lineGreen 1000 eq {lineRed 1000 eq {
    /lineBlue  0 def
    /lineGreen 0 def
    /lineRed   0 def
  } if} if} if
} bind def

/sfc {
  /fillBlue  exch def
  /fillGreen exch def
  /fillRed   exch def
  /color 1 def
  fillBlue 1000 eq {fillGreen 1000 eq {fillRed 1000 eq {
    /fillBlue  0 def
    /fillGreen 0 def
    /fillRed   0 def
  } if} if} if
} bind def
%******************************************************************************
%
% End of Cadence ps.prologue
%
%******************************************************************************
/setpacking where
{
	pop currpack setpacking
} if
%%EndProlog
/#copies 1 def
150 150 4600 6660 600 pap
nxp
%%Page: cds 1
140 0 4458 6653 clwin
140 0 4458 6657 clwin
140 0 4458 6657 clwin
ssls
1000 502 0 slc
1000 502 0 sfc
0 -86 2795 4681 dls
2795 4656 dlt
18 19 dlv
13 6 dlv
18 0 dlv
12 -6 dlv
7 -19 dlv
0 -61 dlv
dle
2863 4656 dlt
18 19 dlv
13 6 dlv
18 0 dlv
13 -6 dlv
6 -19 dlv
0 -61 dlv
dle
2986 4681 dlt
-6 -6 dlv
6 -6 dlv
7 6 dlv
-7 6 dlv
dle
2986 4607 dlt
-6 -6 dlv
6 -6 dlv
7 6 dlv
-7 6 dlv
dle
3054 4700 dlt
13 6 dlv
18 18 dlv
0 -129 dlv
dle
0 -130 2795 4919 dls
111 0 2844 4864 dls
111 0 2844 4826 dls
3005 4888 dlt
0 7 dlv
6 12 dlv
6 6 dlv
13 6 dlv
24 0 dlv
13 -6 dlv
6 -6 dlv
6 -12 dlv
0 -13 dlv
-6 -12 dlv
-12 -19 dlv
-62 -62 dlv
86 0 dlv
dle
3215 4833 dlt
-93 0 dlv
62 86 dlv
0 -130 dlv
dle
3283 4919 dlt
-18 -6 dlv
-13 -18 dlv
-6 -31 dlv
0 -19 dlv
6 -31 dlv
13 -18 dlv
18 -7 dlv
13 0 dlv
18 7 dlv
13 18 dlv
6 31 dlv
0 19 dlv
-6 31 dlv
-13 18 dlv
-18 6 dlv
-13 0 dlv
dle
-87 -130 3333 4919 dls
3382 4802 dlt
-6 -6 dlv
6 -7 dlv
6 7 dlv
-6 6 dlv
dle
3469 4919 dlt
-19 -6 dlv
-12 -18 dlv
-6 -31 dlv
0 -19 dlv
6 -31 dlv
12 -18 dlv
19 -7 dlv
12 0 dlv
19 7 dlv
12 18 dlv
6 31 dlv
0 19 dlv
-6 31 dlv
-12 18 dlv
-19 6 dlv
-12 0 dlv
dle
-86 -130 3518 4919 dls
0 -87 3562 4876 dls
3562 4851 dlt
18 19 dlv
13 6 dlv
18 0 dlv
12 -6 dlv
7 -19 dlv
0 -62 dlv
dle
2788 5071 dlt
25 -87 dlv
25 87 dlv
25 -87 dlv
24 87 dlv
dle
111 0 2931 5058 dls
111 0 2931 5021 dls
3098 5114 dlt
68 0 dlv
-37 -49 dlv
18 0 dlv
13 -7 dlv
6 -6 dlv
6 -18 dlv
0 -13 dlv
-6 -18 dlv
-13 -13 dlv
-18 -6 dlv
-19 0 dlv
-18 6 dlv
-6 7 dlv
-7 12 dlv
dle
3289 5096 dlt
-6 12 dlv
-18 6 dlv
-13 0 dlv
-18 -6 dlv
-13 -19 dlv
-6 -31 dlv
0 -30 dlv
6 -25 dlv
13 -13 dlv
18 -6 dlv
7 0 dlv
18 6 dlv
12 13 dlv
7 18 dlv
0 7 dlv
-7 18 dlv
-12 12 dlv
-18 7 dlv
-7 0 dlv
-18 -7 dlv
-13 -12 dlv
-6 -18 dlv
dle
3370 5114 dlt
-19 -6 dlv
-12 -19 dlv
-6 -31 dlv
0 -18 dlv
6 -31 dlv
12 -19 dlv
19 -6 dlv
12 0 dlv
19 6 dlv
12 19 dlv
6 31 dlv
0 18 dlv
-6 31 dlv
-12 19 dlv
-19 6 dlv
-12 0 dlv
dle
-86 -130 3419 5114 dls
3469 4997 dlt
-6 -7 dlv
6 -6 dlv
6 6 dlv
-6 7 dlv
dle
3555 5114 dlt
-18 -6 dlv
-13 -19 dlv
-6 -31 dlv
0 -18 dlv
6 -31 dlv
13 -19 dlv
18 -6 dlv
13 0 dlv
18 6 dlv
13 19 dlv
6 31 dlv
0 18 dlv
-6 31 dlv
-13 19 dlv
-18 6 dlv
-13 0 dlv
dle
-87 -130 3605 5114 dls
0 -87 3648 5071 dls
3648 5046 dlt
19 19 dlv
12 6 dlv
19 0 dlv
12 -6 dlv
6 -19 dlv
0 -62 dlv
dle
2788 3447 dlt
25 -86 dlv
25 86 dlv
25 -86 dlv
24 86 dlv
dle
111 0 2931 3435 dls
111 0 2931 3398 dls
3098 3490 dlt
68 0 dlv
-37 -49 dlv
18 0 dlv
13 -6 dlv
6 -6 dlv
6 -19 dlv
0 -12 dlv
-6 -19 dlv
-13 -12 dlv
-18 -6 dlv
-19 0 dlv
-18 6 dlv
-6 6 dlv
-7 12 dlv
dle
3289 3472 dlt
-6 12 dlv
-18 6 dlv
-13 0 dlv
-18 -6 dlv
-13 -18 dlv
-6 -31 dlv
0 -31 dlv
6 -25 dlv
13 -12 dlv
18 -6 dlv
7 0 dlv
18 6 dlv
12 12 dlv
7 19 dlv
0 6 dlv
-7 18 dlv
-12 13 dlv
-18 6 dlv
-7 0 dlv
-18 -6 dlv
-13 -13 dlv
-6 -18 dlv
dle
3370 3490 dlt
-19 -6 dlv
-12 -18 dlv
-6 -31 dlv
0 -19 dlv
6 -31 dlv
12 -18 dlv
19 -6 dlv
12 0 dlv
19 6 dlv
12 18 dlv
6 31 dlv
0 19 dlv
-6 31 dlv
-12 18 dlv
-19 6 dlv
-12 0 dlv
dle
-86 -129 3419 3490 dls
3469 3373 dlt
-6 -6 dlv
6 -6 dlv
6 6 dlv
-6 6 dlv
dle
3555 3490 dlt
-18 -6 dlv
-13 -18 dlv
-6 -31 dlv
0 -19 dlv
6 -31 dlv
13 -18 dlv
18 -6 dlv
13 0 dlv
18 6 dlv
13 18 dlv
6 31 dlv
0 19 dlv
-6 31 dlv
-13 18 dlv
-18 6 dlv
-13 0 dlv
dle
-87 -129 3605 3490 dls
0 -86 3648 3447 dls
3648 3422 dlt
19 19 dlv
12 6 dlv
19 0 dlv
12 -6 dlv
6 -19 dlv
0 -61 dlv
dle
0 -130 2795 3296 dls
111 0 2844 3240 dls
111 0 2844 3203 dls
3005 3265 dlt
0 6 dlv
6 12 dlv
6 6 dlv
13 7 dlv
24 0 dlv
13 -7 dlv
6 -6 dlv
6 -12 dlv
0 -13 dlv
-6 -12 dlv
-12 -18 dlv
-62 -62 dlv
86 0 dlv
dle
3215 3209 dlt
-93 0 dlv
62 87 dlv
0 -130 dlv
dle
3283 3296 dlt
-18 -7 dlv
-13 -18 dlv
-6 -31 dlv
0 -19 dlv
6 -31 dlv
13 -18 dlv
18 -6 dlv
13 0 dlv
18 6 dlv
13 18 dlv
6 31 dlv
0 19 dlv
-6 31 dlv
-13 18 dlv
-18 7 dlv
-13 0 dlv
dle
-87 -130 3333 3296 dls
3382 3178 dlt
-6 -6 dlv
6 -6 dlv
6 6 dlv
-6 6 dlv
dle
3469 3296 dlt
-19 -7 dlv
-12 -18 dlv
-6 -31 dlv
0 -19 dlv
6 -31 dlv
12 -18 dlv
19 -6 dlv
12 0 dlv
19 6 dlv
12 18 dlv
6 31 dlv
0 19 dlv
-6 31 dlv
-12 18 dlv
-19 7 dlv
-12 0 dlv
dle
-86 -130 3518 3296 dls
0 -86 3562 3252 dls
3562 3228 dlt
18 18 dlv
13 6 dlv
18 0 dlv
12 -6 dlv
7 -18 dlv
0 -62 dlv
dle
0 -86 2795 3057 dls
2795 3033 dlt
18 18 dlv
13 6 dlv
18 0 dlv
12 -6 dlv
7 -18 dlv
0 -62 dlv
dle
2863 3033 dlt
18 18 dlv
13 6 dlv
18 0 dlv
13 -6 dlv
6 -18 dlv
0 -62 dlv
dle
2986 3057 dlt
-6 -6 dlv
6 -6 dlv
7 6 dlv
-7 6 dlv
dle
2986 2983 dlt
-6 -6 dlv
6 -6 dlv
7 6 dlv
-7 6 dlv
dle
3054 3076 dlt
13 6 dlv
18 19 dlv
0 -130 dlv
dle
2788 2473 dlt
25 -87 dlv
25 87 dlv
25 -87 dlv
24 87 dlv
dle
111 0 2931 2461 dls
111 0 2931 2423 dls
3098 2516 dlt
68 0 dlv
-37 -49 dlv
18 0 dlv
13 -6 dlv
6 -7 dlv
6 -18 dlv
0 -13 dlv
-6 -18 dlv
-13 -12 dlv
-18 -7 dlv
-19 0 dlv
-18 7 dlv
-6 6 dlv
-7 12 dlv
dle
3289 2498 dlt
-6 12 dlv
-18 6 dlv
-13 0 dlv
-18 -6 dlv
-13 -19 dlv
-6 -30 dlv
0 -31 dlv
6 -25 dlv
13 -12 dlv
18 -7 dlv
7 0 dlv
18 7 dlv
12 12 dlv
7 18 dlv
0 7 dlv
-7 18 dlv
-12 13 dlv
-18 6 dlv
-7 0 dlv
-18 -6 dlv
-13 -13 dlv
-6 -18 dlv
dle
3370 2516 dlt
-19 -6 dlv
-12 -19 dlv
-6 -30 dlv
0 -19 dlv
6 -31 dlv
12 -18 dlv
19 -7 dlv
12 0 dlv
19 7 dlv
12 18 dlv
6 31 dlv
0 19 dlv
-6 30 dlv
-12 19 dlv
-19 6 dlv
-12 0 dlv
dle
-86 -130 3419 2516 dls
3469 2399 dlt
-6 -6 dlv
6 -7 dlv
6 7 dlv
-6 6 dlv
dle
3555 2516 dlt
-18 -6 dlv
-13 -19 dlv
-6 -30 dlv
0 -19 dlv
6 -31 dlv
13 -18 dlv
18 -7 dlv
13 0 dlv
18 7 dlv
13 18 dlv
6 31 dlv
0 19 dlv
-6 30 dlv
-13 19 dlv
-18 6 dlv
-13 0 dlv
dle
-87 -130 3605 2516 dls
0 -87 3648 2473 dls
3648 2448 dlt
19 19 dlv
12 6 dlv
19 0 dlv
12 -6 dlv
6 -19 dlv
0 -62 dlv
dle
0 -130 2795 2321 dls
111 0 2844 2266 dls
111 0 2844 2229 dls
3005 2290 dlt
0 7 dlv
6 12 dlv
6 6 dlv
13 6 dlv
24 0 dlv
13 -6 dlv
6 -6 dlv
6 -12 dlv
0 -13 dlv
-6 -12 dlv
-12 -19 dlv
-62 -62 dlv
86 0 dlv
dle
3215 2235 dlt
-93 0 dlv
62 86 dlv
0 -130 dlv
dle
3283 2321 dlt
-18 -6 dlv
-13 -18 dlv
-6 -31 dlv
0 -19 dlv
6 -31 dlv
13 -18 dlv
18 -7 dlv
13 0 dlv
18 7 dlv
13 18 dlv
6 31 dlv
0 19 dlv
-6 31 dlv
-13 18 dlv
-18 6 dlv
-13 0 dlv
dle
-87 -130 3333 2321 dls
3382 2204 dlt
-6 -6 dlv
6 -7 dlv
6 7 dlv
-6 6 dlv
dle
3469 2321 dlt
-19 -6 dlv
-12 -18 dlv
-6 -31 dlv
0 -19 dlv
6 -31 dlv
12 -18 dlv
19 -7 dlv
12 0 dlv
19 7 dlv
12 18 dlv
6 31 dlv
0 19 dlv
-6 31 dlv
-12 18 dlv
-19 6 dlv
-12 0 dlv
dle
-86 -130 3518 2321 dls
0 -87 3562 2278 dls
3562 2253 dlt
18 19 dlv
13 6 dlv
18 0 dlv
12 -6 dlv
7 -19 dlv
0 -62 dlv
dle
0 -86 2795 2083 dls
2795 2058 dlt
18 19 dlv
13 6 dlv
18 0 dlv
12 -6 dlv
7 -19 dlv
0 -61 dlv
dle
2863 2058 dlt
18 19 dlv
13 6 dlv
18 0 dlv
13 -6 dlv
6 -19 dlv
0 -61 dlv
dle
2986 2083 dlt
-6 -6 dlv
6 -6 dlv
7 6 dlv
-7 6 dlv
dle
2986 2009 dlt
-6 -6 dlv
6 -6 dlv
7 6 dlv
-7 6 dlv
dle
3054 2102 dlt
13 6 dlv
18 19 dlv
0 -130 dlv
dle
2788 1499 dlt
25 -87 dlv
25 87 dlv
25 -87 dlv
24 87 dlv
dle
111 0 2931 1486 dls
111 0 2931 1449 dls
3098 1542 dlt
68 0 dlv
-37 -49 dlv
18 0 dlv
13 -7 dlv
6 -6 dlv
6 -18 dlv
0 -13 dlv
-6 -18 dlv
-13 -13 dlv
-18 -6 dlv
-19 0 dlv
-18 6 dlv
-6 6 dlv
-7 13 dlv
dle
3289 1523 dlt
-6 13 dlv
-18 6 dlv
-13 0 dlv
-18 -6 dlv
-13 -19 dlv
-6 -31 dlv
0 -31 dlv
6 -24 dlv
13 -13 dlv
18 -6 dlv
7 0 dlv
18 6 dlv
12 13 dlv
7 18 dlv
0 6 dlv
-7 19 dlv
-12 12 dlv
-18 7 dlv
-7 0 dlv
-18 -7 dlv
-13 -12 dlv
-6 -19 dlv
dle
3370 1542 dlt
-19 -6 dlv
-12 -19 dlv
-6 -31 dlv
0 -18 dlv
6 -31 dlv
12 -19 dlv
19 -6 dlv
12 0 dlv
19 6 dlv
12 19 dlv
6 31 dlv
0 18 dlv
-6 31 dlv
-12 19 dlv
-19 6 dlv
-12 0 dlv
dle
-86 -130 3419 1542 dls
3469 1424 dlt
-6 -6 dlv
6 -6 dlv
6 6 dlv
-6 6 dlv
dle
3555 1542 dlt
-18 -6 dlv
-13 -19 dlv
-6 -31 dlv
0 -18 dlv
6 -31 dlv
13 -19 dlv
18 -6 dlv
13 0 dlv
18 6 dlv
13 19 dlv
6 31 dlv
0 18 dlv
-6 31 dlv
-13 19 dlv
-18 6 dlv
-13 0 dlv
dle
-87 -130 3605 1542 dls
0 -87 3648 1499 dls
3648 1474 dlt
19 19 dlv
12 6 dlv
19 0 dlv
12 -6 dlv
6 -19 dlv
0 -62 dlv
dle
0 -130 2795 1347 dls
111 0 2844 1291 dls
111 0 2844 1254 dls
3005 1316 dlt
0 6 dlv
6 13 dlv
6 6 dlv
13 6 dlv
24 0 dlv
13 -6 dlv
6 -6 dlv
6 -13 dlv
0 -12 dlv
-6 -12 dlv
-12 -19 dlv
-62 -62 dlv
86 0 dlv
dle
3215 1261 dlt
-93 0 dlv
62 86 dlv
0 -130 dlv
dle
3283 1347 dlt
-18 -6 dlv
-13 -19 dlv
-6 -31 dlv
0 -18 dlv
6 -31 dlv
13 -19 dlv
18 -6 dlv
13 0 dlv
18 6 dlv
13 19 dlv
6 31 dlv
0 18 dlv
-6 31 dlv
-13 19 dlv
-18 6 dlv
-13 0 dlv
dle
-87 -130 3333 1347 dls
3382 1230 dlt
-6 -7 dlv
6 -6 dlv
6 6 dlv
-6 7 dlv
dle
3469 1347 dlt
-19 -6 dlv
-12 -19 dlv
-6 -31 dlv
0 -18 dlv
6 -31 dlv
12 -19 dlv
19 -6 dlv
12 0 dlv
19 6 dlv
12 19 dlv
6 31 dlv
0 18 dlv
-6 31 dlv
-12 19 dlv
-19 6 dlv
-12 0 dlv
dle
-86 -130 3518 1347 dls
0 -87 3562 1304 dls
3562 1279 dlt
18 19 dlv
13 6 dlv
18 0 dlv
12 -6 dlv
7 -19 dlv
0 -62 dlv
dle
0 -87 2795 1109 dls
2795 1084 dlt
18 19 dlv
13 6 dlv
18 0 dlv
12 -6 dlv
7 -19 dlv
0 -62 dlv
dle
2863 1084 dlt
18 19 dlv
13 6 dlv
18 0 dlv
13 -6 dlv
6 -19 dlv
0 -62 dlv
dle
2986 1109 dlt
-6 -6 dlv
6 -6 dlv
7 6 dlv
-7 6 dlv
dle
2986 1035 dlt
-6 -6 dlv
6 -7 dlv
7 7 dlv
-7 6 dlv
dle
3054 1128 dlt
13 6 dlv
18 18 dlv
0 -130 dlv
dle
1000 0 0 slc
1000 0 0 sfc
2795 5358 dlt
0 130 dlv
49 -130 dlv
50 130 dlv
0 -130 dlv
dle
2949 5488 dlt
68 0 dlv
-37 -50 dlv
19 0 dlv
12 -6 dlv
6 -6 dlv
6 -19 dlv
0 -12 dlv
-6 -19 dlv
-12 -12 dlv
-19 -6 dlv
-18 0 dlv
-19 6 dlv
-6 6 dlv
-6 12 dlv
dle
2795 3734 dlt
0 130 dlv
49 -130 dlv
50 130 dlv
0 -130 dlv
dle
2943 3833 dlt
0 6 dlv
6 12 dlv
6 7 dlv
13 6 dlv
25 0 dlv
12 -6 dlv
6 -7 dlv
6 -12 dlv
0 -12 dlv
-6 -13 dlv
-12 -18 dlv
-62 -62 dlv
86 0 dlv
dle
2795 2760 dlt
0 130 dlv
49 -130 dlv
50 130 dlv
0 -130 dlv
dle
2955 2865 dlt
13 6 dlv
18 19 dlv
0 -130 dlv
dle
2795 1786 dlt
0 129 dlv
49 -129 dlv
50 129 dlv
0 -129 dlv
dle
2974 1915 dlt
-19 -6 dlv
-12 -18 dlv
-6 -31 dlv
0 -19 dlv
6 -31 dlv
12 -18 dlv
19 -6 dlv
12 0 dlv
19 6 dlv
12 18 dlv
6 31 dlv
0 19 dlv
-6 31 dlv
-12 18 dlv
-19 6 dlv
-12 0 dlv
dle
-86 -129 3023 1915 dls
0 800 400 slc
0 800 400 sfc
2510 162 dpb
2835 162 dpv
2672 0 dpv
dpu
0 487 2672 162 dls
0 649 2672 5845 dls
811 0 2267 6494 dls
2672 5520 dlt
0 -244 dlv
-243 0 dlv
0 -487 dlv
243 0 dlv
0 -243 dlv
dle
0 487 2348 4789 dls
2267 5033 81 dcu
162 0 2023 5033 dls
2429 5276 dlt
81 -48 dlv
0 97 dlv
-81 -49 dlv
dle
2672 3166 dlt
-81 48 dlv
0 -97 dlv
81 49 dlv
dle
325 0 2023 3409 dls
0 487 2348 3166 dls
2672 3896 dlt
0 -243 dlv
-243 0 dlv
0 -487 dlv
243 0 dlv
0 -244 dlv
dle
2672 2191 dlt
-81 49 dlv
0 -97 dlv
81 48 dlv
dle
325 0 2023 2435 dls
0 488 2348 2191 dls
2672 2922 dlt
0 -243 dlv
-243 0 dlv
0 -488 dlv
243 0 dlv
0 -243 dlv
dle
2672 1217 dlt
-81 49 dlv
0 -97 dlv
81 48 dlv
dle
325 0 2023 1461 dls
0 487 2348 1217 dls
2672 1948 dlt
0 -244 dlv
-243 0 dlv
0 -487 dlv
243 0 dlv
0 -243 dlv
dle
224 749 1000 slc
224 749 1000 sfc
1698 5033 81 dcs
812 0 886 5033 dls
1137 0 886 3409 dls
1137 0 886 1461 dls
2672 4221 81 dcs
1299 0 2672 4221 dls
0 325 2672 4221 dls
325 0 1698 5033 dls
0 2598 1698 2435 dls
325 0 1698 2435 dls
0 325 2672 649 dls
0 325 2672 5520 dls
0 325 2672 3896 dls
1000 0 0 slc
1000 0 0 sfc
414 3452 dlt
0 7 dlv
8 16 dlv
7 8 dlv
16 7 dlv
31 0 dlv
15 -7 dlv
8 -8 dlv
8 -16 dlv
0 -15 dlv
-8 -15 dlv
-15 -24 dlv
-78 -77 dlv
108 0 dlv
dle
462 1511 dlt
15 8 dlv
24 23 dlv
0 -162 dlv
dle
360 5075 dlt
-8 16 dlv
-15 15 dlv
-16 8 dlv
-31 0 dlv
-15 -8 dlv
-16 -15 dlv
-7 -16 dlv
-8 -23 dlv
0 -38 dlv
8 -24 dlv
7 -15 dlv
16 -16 dlv
15 -7 dlv
31 0 dlv
16 7 dlv
15 16 dlv
8 15 dlv
dle
0 -162 414 5114 dls
-108 -108 522 5114 dls
69 -93 453 5045 dls
3554 4302 dlt
-16 -7 dlv
-15 -16 dlv
-8 -15 dlv
-8 -24 dlv
0 -38 dlv
8 -23 dlv
8 -16 dlv
15 -15 dlv
16 -8 dlv
31 0 dlv
15 8 dlv
16 15 dlv
7 16 dlv
8 23 dlv
0 38 dlv
-8 24 dlv
-7 15 dlv
-16 16 dlv
-15 7 dlv
-31 0 dlv
dle
3685 4302 dlt
0 -116 dlv
8 -23 dlv
16 -15 dlv
23 -8 dlv
15 0 dlv
23 8 dlv
16 15 dlv
8 23 dlv
0 116 dlv
dle
0 -162 3886 4302 dls
108 0 3832 4302 dls
2916 400 dlt
0 -87 dlv
-5 -16 dlv
-6 -5 dlv
-11 -6 dlv
-16 0 dlv
-11 6 dlv
dle
2916 384 dlt
-11 11 dlv
-11 5 dlv
-16 0 dlv
-11 -5 dlv
-11 -11 dlv
-5 -16 dlv
0 -11 dlv
5 -17 dlv
11 -10 dlv
11 -6 dlv
16 0 dlv
11 6 dlv
11 10 dlv
dle
0 -76 2959 400 dls
2959 378 dlt
17 17 dlv
10 5 dlv
17 0 dlv
10 -5 dlv
6 -17 dlv
0 -54 dlv
dle
0 -114 3122 438 dls
3122 384 dlt
-11 11 dlv
-11 5 dlv
-16 0 dlv
-11 -5 dlv
-11 -11 dlv
-5 -16 dlv
0 -11 dlv
5 -17 dlv
11 -10 dlv
11 -6 dlv
16 0 dlv
11 6 dlv
11 10 dlv
dle
2846 6245 dlt
32 -76 dlv
33 76 dlv
dle
0 -114 3003 6283 dls
3003 6229 dlt
-11 11 dlv
-11 5 dlv
-16 0 dlv
-11 -5 dlv
-11 -11 dlv
-5 -16 dlv
0 -11 dlv
5 -16 dlv
11 -11 dlv
11 -6 dlv
16 0 dlv
11 6 dlv
11 11 dlv
dle
0 -114 3105 6283 dls
3105 6229 dlt
-10 11 dlv
-11 5 dlv
-16 0 dlv
-11 -5 dlv
-11 -11 dlv
-6 -16 dlv
0 -11 dlv
6 -16 dlv
11 -11 dlv
11 -6 dlv
16 0 dlv
11 6 dlv
10 11 dlv
dle
1000 0 0 slc
1000 0 0 sfc
2607 584 2737 714 dbs
724 3263 dpb
724 3555 dpv
903 3555 dpv
1049 3409 dpv
903 3263 dpv
dps
724 1315 dpb
724 1607 dpv
903 1607 dpv
1049 1461 dpv
903 1315 dpv
dps
724 4887 dpb
724 5179 dpv
903 5179 dpv
1049 5033 dpv
903 4887 dpv
dps
4134 4075 dpb
4134 4367 dpv
4312 4367 dpv
4458 4221 dpv
4312 4075 dpv
dps
2607 5780 2737 5910 dbs
2607 4481 2737 4611 dbs
2607 5455 2737 5585 dbs
1958 4968 2088 5098 dbs
2607 3831 2737 3961 dbs
2607 2857 2737 2987 dbs
1958 3344 2088 3474 dbs
2607 2857 2737 2987 dbs
2607 1883 2737 2013 dbs
1958 2370 2088 2500 dbs
2607 1883 2737 2013 dbs
2607 909 2737 1039 dbs
1958 1396 2088 1526 dbs
1000 1000 1000 slc
1000 1000 1000 sfc
1 lpb
1 3 lpe
1 sls
650 487 2185 4708 dbu
140 0 4459 6660 clwin
gfs
%%Trailer
%%EOF
